{
    "two-sum": [
        "Two Sum",
        "Easy"
    ],
    "add-two-numbers": [
        "Add Two Numbers",
        "Medium"
    ],
    "longest-substring-without-repeating-characters": [
        "Longest Substring Without Repeating Characters",
        "Medium"
    ],
    "median-of-two-sorted-arrays": [
        "Median of Two Sorted Arrays",
        "Hard"
    ],
    "longest-palindromic-substring": [
        "Longest Palindromic Substring",
        "Medium"
    ],
    "zigzag-conversion": [
        "Zigzag Conversion",
        "Medium"
    ],
    "reverse-integer": [
        "Reverse Integer",
        "Medium"
    ],
    "string-to-integer-atoi": [
        "String to Integer (atoi)",
        "Medium"
    ],
    "palindrome-number": [
        "Palindrome Number",
        "Easy"
    ],
    "regular-expression-matching": [
        "Regular Expression Matching",
        "Hard"
    ],
    "container-with-most-water": [
        "Container With Most Water",
        "Medium"
    ],
    "integer-to-roman": [
        "Integer to Roman",
        "Medium"
    ],
    "roman-to-integer": [
        "Roman to Integer",
        "Easy"
    ],
    "longest-common-prefix": [
        "Longest Common Prefix",
        "Easy"
    ],
    "3sum": [
        "3Sum",
        "Medium"
    ],
    "3sum-closest": [
        "3Sum Closest",
        "Medium"
    ],
    "letter-combinations-of-a-phone-number": [
        "Letter Combinations of a Phone Number",
        "Medium"
    ],
    "4sum": [
        "4Sum",
        "Medium"
    ],
    "remove-nth-node-from-end-of-list": [
        "Remove Nth Node From End of List",
        "Medium"
    ],
    "valid-parentheses": [
        "Valid Parentheses",
        "Easy"
    ],
    "merge-two-sorted-lists": [
        "Merge Two Sorted Lists",
        "Easy"
    ],
    "generate-parentheses": [
        "Generate Parentheses",
        "Medium"
    ],
    "merge-k-sorted-lists": [
        "Merge k Sorted Lists",
        "Hard"
    ],
    "swap-nodes-in-pairs": [
        "Swap Nodes in Pairs",
        "Medium"
    ],
    "reverse-nodes-in-k-group": [
        "Reverse Nodes in k-Group",
        "Hard"
    ],
    "remove-duplicates-from-sorted-array": [
        "Remove Duplicates from Sorted Array",
        "Easy"
    ],
    "remove-element": [
        "Remove Element",
        "Easy"
    ],
    "find-the-index-of-the-first-occurrence-in-a-string": [
        "Find the Index of the First Occurrence in a String",
        "Medium"
    ],
    "divide-two-integers": [
        "Divide Two Integers",
        "Medium"
    ],
    "substring-with-concatenation-of-all-words": [
        "Substring with Concatenation of All Words",
        "Hard"
    ],
    "next-permutation": [
        "Next Permutation",
        "Medium"
    ],
    "longest-valid-parentheses": [
        "Longest Valid Parentheses",
        "Hard"
    ],
    "search-in-rotated-sorted-array": [
        "Search in Rotated Sorted Array",
        "Medium"
    ],
    "find-first-and-last-position-of-element-in-sorted-array": [
        "Find First and Last Position of Element in Sorted Array",
        "Medium"
    ],
    "search-insert-position": [
        "Search Insert Position",
        "Easy"
    ],
    "valid-sudoku": [
        "Valid Sudoku",
        "Medium"
    ],
    "sudoku-solver": [
        "Sudoku Solver",
        "Hard"
    ],
    "count-and-say": [
        "Count and Say",
        "Medium"
    ],
    "combination-sum": [
        "Combination Sum",
        "Medium"
    ],
    "combination-sum-ii": [
        "Combination Sum II",
        "Medium"
    ],
    "first-missing-positive": [
        "First Missing Positive",
        "Hard"
    ],
    "trapping-rain-water": [
        "Trapping Rain Water",
        "Hard"
    ],
    "multiply-strings": [
        "Multiply Strings",
        "Medium"
    ],
    "wildcard-matching": [
        "Wildcard Matching",
        "Hard"
    ],
    "jump-game-ii": [
        "Jump Game II",
        "Medium"
    ],
    "permutations": [
        "Permutations",
        "Medium"
    ],
    "permutations-ii": [
        "Permutations II",
        "Medium"
    ],
    "rotate-image": [
        "Rotate Image",
        "Medium"
    ],
    "group-anagrams": [
        "Group Anagrams",
        "Medium"
    ],
    "powx-n": [
        "Pow(x, n)",
        "Medium"
    ],
    "n-queens": [
        "N-Queens",
        "Hard"
    ],
    "n-queens-ii": [
        "N-Queens II",
        "Hard"
    ],
    "maximum-subarray": [
        "Maximum Subarray",
        "Medium"
    ],
    "spiral-matrix": [
        "Spiral Matrix",
        "Medium"
    ],
    "jump-game": [
        "Jump Game",
        "Medium"
    ],
    "merge-intervals": [
        "Merge Intervals",
        "Medium"
    ],
    "insert-interval": [
        "Insert Interval",
        "Medium"
    ],
    "length-of-last-word": [
        "Length of Last Word",
        "Easy"
    ],
    "spiral-matrix-ii": [
        "Spiral Matrix II",
        "Medium"
    ],
    "permutation-sequence": [
        "Permutation Sequence",
        "Hard"
    ],
    "rotate-list": [
        "Rotate List",
        "Medium"
    ],
    "unique-paths": [
        "Unique Paths",
        "Medium"
    ],
    "unique-paths-ii": [
        "Unique Paths II",
        "Medium"
    ],
    "minimum-path-sum": [
        "Minimum Path Sum",
        "Medium"
    ],
    "valid-number": [
        "Valid Number",
        "Hard"
    ],
    "plus-one": [
        "Plus One",
        "Easy"
    ],
    "add-binary": [
        "Add Binary",
        "Easy"
    ],
    "text-justification": [
        "Text Justification",
        "Hard"
    ],
    "sqrtx": [
        "Sqrt(x)",
        "Easy"
    ],
    "climbing-stairs": [
        "Climbing Stairs",
        "Easy"
    ],
    "simplify-path": [
        "Simplify Path",
        "Medium"
    ],
    "edit-distance": [
        "Edit Distance",
        "Hard"
    ],
    "set-matrix-zeroes": [
        "Set Matrix Zeroes",
        "Medium"
    ],
    "search-a-2d-matrix": [
        "Search a 2D Matrix",
        "Medium"
    ],
    "sort-colors": [
        "Sort Colors",
        "Medium"
    ],
    "minimum-window-substring": [
        "Minimum Window Substring",
        "Hard"
    ],
    "combinations": [
        "Combinations",
        "Medium"
    ],
    "subsets": [
        "Subsets",
        "Medium"
    ],
    "word-search": [
        "Word Search",
        "Medium"
    ],
    "remove-duplicates-from-sorted-array-ii": [
        "Remove Duplicates from Sorted Array II",
        "Medium"
    ],
    "search-in-rotated-sorted-array-ii": [
        "Search in Rotated Sorted Array II",
        "Medium"
    ],
    "remove-duplicates-from-sorted-list-ii": [
        "Remove Duplicates from Sorted List II",
        "Medium"
    ],
    "remove-duplicates-from-sorted-list": [
        "Remove Duplicates from Sorted List",
        "Easy"
    ],
    "largest-rectangle-in-histogram": [
        "Largest Rectangle in Histogram",
        "Hard"
    ],
    "maximal-rectangle": [
        "Maximal Rectangle",
        "Hard"
    ],
    "partition-list": [
        "Partition List",
        "Medium"
    ],
    "scramble-string": [
        "Scramble String",
        "Hard"
    ],
    "merge-sorted-array": [
        "Merge Sorted Array",
        "Easy"
    ],
    "gray-code": [
        "Gray Code",
        "Medium"
    ],
    "subsets-ii": [
        "Subsets II",
        "Medium"
    ],
    "decode-ways": [
        "Decode Ways",
        "Medium"
    ],
    "reverse-linked-list-ii": [
        "Reverse Linked List II",
        "Medium"
    ],
    "restore-ip-addresses": [
        "Restore IP Addresses",
        "Medium"
    ],
    "binary-tree-inorder-traversal": [
        "Binary Tree Inorder Traversal",
        "Easy"
    ],
    "unique-binary-search-trees-ii": [
        "Unique Binary Search Trees II",
        "Medium"
    ],
    "unique-binary-search-trees": [
        "Unique Binary Search Trees",
        "Medium"
    ],
    "interleaving-string": [
        "Interleaving String",
        "Medium"
    ],
    "validate-binary-search-tree": [
        "Validate Binary Search Tree",
        "Medium"
    ],
    "recover-binary-search-tree": [
        "Recover Binary Search Tree",
        "Medium"
    ],
    "same-tree": [
        "Same Tree",
        "Easy"
    ],
    "symmetric-tree": [
        "Symmetric Tree",
        "Easy"
    ],
    "binary-tree-level-order-traversal": [
        "Binary Tree Level Order Traversal",
        "Medium"
    ],
    "binary-tree-zigzag-level-order-traversal": [
        "Binary Tree Zigzag Level Order Traversal",
        "Medium"
    ],
    "maximum-depth-of-binary-tree": [
        "Maximum Depth of Binary Tree",
        "Easy"
    ],
    "construct-binary-tree-from-preorder-and-inorder-traversal": [
        "Construct Binary Tree from Preorder and Inorder Traversal",
        "Medium"
    ],
    "construct-binary-tree-from-inorder-and-postorder-traversal": [
        "Construct Binary Tree from Inorder and Postorder Traversal",
        "Medium"
    ],
    "binary-tree-level-order-traversal-ii": [
        "Binary Tree Level Order Traversal II",
        "Medium"
    ],
    "convert-sorted-array-to-binary-search-tree": [
        "Convert Sorted Array to Binary Search Tree",
        "Easy"
    ],
    "convert-sorted-list-to-binary-search-tree": [
        "Convert Sorted List to Binary Search Tree",
        "Medium"
    ],
    "balanced-binary-tree": [
        "Balanced Binary Tree",
        "Easy"
    ],
    "minimum-depth-of-binary-tree": [
        "Minimum Depth of Binary Tree",
        "Easy"
    ],
    "path-sum": [
        "Path Sum",
        "Easy"
    ],
    "path-sum-ii": [
        "Path Sum II",
        "Medium"
    ],
    "flatten-binary-tree-to-linked-list": [
        "Flatten Binary Tree to Linked List",
        "Medium"
    ],
    "distinct-subsequences": [
        "Distinct Subsequences",
        "Hard"
    ],
    "populating-next-right-pointers-in-each-node": [
        "Populating Next Right Pointers in Each Node",
        "Medium"
    ],
    "populating-next-right-pointers-in-each-node-ii": [
        "Populating Next Right Pointers in Each Node II",
        "Medium"
    ],
    "pascals-triangle": [
        "Pascal's Triangle",
        "Easy"
    ],
    "pascals-triangle-ii": [
        "Pascal's Triangle II",
        "Easy"
    ],
    "triangle": [
        "Triangle",
        "Medium"
    ],
    "best-time-to-buy-and-sell-stock": [
        "Best Time to Buy and Sell Stock",
        "Easy"
    ],
    "best-time-to-buy-and-sell-stock-ii": [
        "Best Time to Buy and Sell Stock II",
        "Medium"
    ],
    "best-time-to-buy-and-sell-stock-iii": [
        "Best Time to Buy and Sell Stock III",
        "Hard"
    ],
    "binary-tree-maximum-path-sum": [
        "Binary Tree Maximum Path Sum",
        "Hard"
    ],
    "valid-palindrome": [
        "Valid Palindrome",
        "Easy"
    ],
    "word-ladder-ii": [
        "Word Ladder II",
        "Hard"
    ],
    "word-ladder": [
        "Word Ladder",
        "Hard"
    ],
    "longest-consecutive-sequence": [
        "Longest Consecutive Sequence",
        "Medium"
    ],
    "sum-root-to-leaf-numbers": [
        "Sum Root to Leaf Numbers",
        "Medium"
    ],
    "surrounded-regions": [
        "Surrounded Regions",
        "Medium"
    ],
    "palindrome-partitioning": [
        "Palindrome Partitioning",
        "Medium"
    ],
    "palindrome-partitioning-ii": [
        "Palindrome Partitioning II",
        "Hard"
    ],
    "clone-graph": [
        "Clone Graph",
        "Medium"
    ],
    "gas-station": [
        "Gas Station",
        "Medium"
    ],
    "candy": [
        "Candy",
        "Hard"
    ],
    "single-number": [
        "Single Number",
        "Easy"
    ],
    "single-number-ii": [
        "Single Number II",
        "Medium"
    ],
    "copy-list-with-random-pointer": [
        "Copy List with Random Pointer",
        "Medium"
    ],
    "word-break": [
        "Word Break",
        "Medium"
    ],
    "word-break-ii": [
        "Word Break II",
        "Hard"
    ],
    "linked-list-cycle": [
        "Linked List Cycle",
        "Easy"
    ],
    "linked-list-cycle-ii": [
        "Linked List Cycle II",
        "Medium"
    ],
    "reorder-list": [
        "Reorder List",
        "Medium"
    ],
    "binary-tree-preorder-traversal": [
        "Binary Tree Preorder Traversal",
        "Easy"
    ],
    "binary-tree-postorder-traversal": [
        "Binary Tree Postorder Traversal",
        "Easy"
    ],
    "lru-cache": [
        "LRU Cache",
        "Medium"
    ],
    "insertion-sort-list": [
        "Insertion Sort List",
        "Medium"
    ],
    "sort-list": [
        "Sort List",
        "Medium"
    ],
    "max-points-on-a-line": [
        "Max Points on a Line",
        "Hard"
    ],
    "evaluate-reverse-polish-notation": [
        "Evaluate Reverse Polish Notation",
        "Medium"
    ],
    "reverse-words-in-a-string": [
        "Reverse Words in a String",
        "Medium"
    ],
    "maximum-product-subarray": [
        "Maximum Product Subarray",
        "Medium"
    ],
    "find-minimum-in-rotated-sorted-array": [
        "Find Minimum in Rotated Sorted Array",
        "Medium"
    ],
    "find-minimum-in-rotated-sorted-array-ii": [
        "Find Minimum in Rotated Sorted Array II",
        "Hard"
    ],
    "min-stack": [
        "Min Stack",
        "Medium"
    ],
    "intersection-of-two-linked-lists": [
        "Intersection of Two Linked Lists",
        "Easy"
    ],
    "find-peak-element": [
        "Find Peak Element",
        "Medium"
    ],
    "maximum-gap": [
        "Maximum Gap",
        "Hard"
    ],
    "compare-version-numbers": [
        "Compare Version Numbers",
        "Medium"
    ],
    "fraction-to-recurring-decimal": [
        "Fraction to Recurring Decimal",
        "Medium"
    ],
    "two-sum-ii-input-array-is-sorted": [
        "Two Sum II - Input Array Is Sorted",
        "Medium"
    ],
    "excel-sheet-column-title": [
        "Excel Sheet Column Title",
        "Easy"
    ],
    "majority-element": [
        "Majority Element",
        "Easy"
    ],
    "excel-sheet-column-number": [
        "Excel Sheet Column Number",
        "Easy"
    ],
    "factorial-trailing-zeroes": [
        "Factorial Trailing Zeroes",
        "Medium"
    ],
    "binary-search-tree-iterator": [
        "Binary Search Tree Iterator",
        "Medium"
    ],
    "dungeon-game": [
        "Dungeon Game",
        "Hard"
    ],
    "combine-two-tables": [
        "Combine Two Tables",
        "Easy"
    ],
    "second-highest-salary": [
        "Second Highest Salary",
        "Medium"
    ],
    "nth-highest-salary": [
        "Nth Highest Salary",
        "Medium"
    ],
    "rank-scores": [
        "Rank Scores",
        "Medium"
    ],
    "largest-number": [
        "Largest Number",
        "Medium"
    ],
    "consecutive-numbers": [
        "Consecutive Numbers",
        "Medium"
    ],
    "employees-earning-more-than-their-managers": [
        "Employees Earning More Than Their Managers",
        "Easy"
    ],
    "duplicate-emails": [
        "Duplicate Emails",
        "Easy"
    ],
    "customers-who-never-order": [
        "Customers Who Never Order",
        "Easy"
    ],
    "department-highest-salary": [
        "Department Highest Salary",
        "Medium"
    ],
    "department-top-three-salaries": [
        "Department Top Three Salaries",
        "Hard"
    ],
    "repeated-dna-sequences": [
        "Repeated DNA Sequences",
        "Medium"
    ],
    "best-time-to-buy-and-sell-stock-iv": [
        "Best Time to Buy and Sell Stock IV",
        "Hard"
    ],
    "rotate-array": [
        "Rotate Array",
        "Medium"
    ],
    "reverse-bits": [
        "Reverse Bits",
        "Easy"
    ],
    "number-of-1-bits": [
        "Number of 1 Bits",
        "Easy"
    ],
    "word-frequency": [
        "Word Frequency",
        "Medium"
    ],
    "valid-phone-numbers": [
        "Valid Phone Numbers",
        "Easy"
    ],
    "transpose-file": [
        "Transpose File",
        "Medium"
    ],
    "tenth-line": [
        "Tenth Line",
        "Easy"
    ],
    "delete-duplicate-emails": [
        "Delete Duplicate Emails",
        "Easy"
    ],
    "rising-temperature": [
        "Rising Temperature",
        "Easy"
    ],
    "house-robber": [
        "House Robber",
        "Medium"
    ],
    "binary-tree-right-side-view": [
        "Binary Tree Right Side View",
        "Medium"
    ],
    "number-of-islands": [
        "Number of Islands",
        "Medium"
    ],
    "bitwise-and-of-numbers-range": [
        "Bitwise AND of Numbers Range",
        "Medium"
    ],
    "happy-number": [
        "Happy Number",
        "Easy"
    ],
    "remove-linked-list-elements": [
        "Remove Linked List Elements",
        "Easy"
    ],
    "count-primes": [
        "Count Primes",
        "Medium"
    ],
    "isomorphic-strings": [
        "Isomorphic Strings",
        "Easy"
    ],
    "reverse-linked-list": [
        "Reverse Linked List",
        "Easy"
    ],
    "course-schedule": [
        "Course Schedule",
        "Medium"
    ],
    "implement-trie-prefix-tree": [
        "Implement Trie (Prefix Tree)",
        "Medium"
    ],
    "minimum-size-subarray-sum": [
        "Minimum Size Subarray Sum",
        "Medium"
    ],
    "course-schedule-ii": [
        "Course Schedule II",
        "Medium"
    ],
    "design-add-and-search-words-data-structure": [
        "Design Add and Search Words Data Structure",
        "Medium"
    ],
    "word-search-ii": [
        "Word Search II",
        "Hard"
    ],
    "house-robber-ii": [
        "House Robber II",
        "Medium"
    ],
    "shortest-palindrome": [
        "Shortest Palindrome",
        "Hard"
    ],
    "kth-largest-element-in-an-array": [
        "Kth Largest Element in an Array",
        "Medium"
    ],
    "combination-sum-iii": [
        "Combination Sum III",
        "Medium"
    ],
    "contains-duplicate": [
        "Contains Duplicate",
        "Easy"
    ],
    "the-skyline-problem": [
        "The Skyline Problem",
        "Hard"
    ],
    "contains-duplicate-ii": [
        "Contains Duplicate II",
        "Easy"
    ],
    "contains-duplicate-iii": [
        "Contains Duplicate III",
        "Hard"
    ],
    "maximal-square": [
        "Maximal Square",
        "Medium"
    ],
    "count-complete-tree-nodes": [
        "Count Complete Tree Nodes",
        "Medium"
    ],
    "rectangle-area": [
        "Rectangle Area",
        "Medium"
    ],
    "basic-calculator": [
        "Basic Calculator",
        "Hard"
    ],
    "implement-stack-using-queues": [
        "Implement Stack using Queues",
        "Easy"
    ],
    "invert-binary-tree": [
        "Invert Binary Tree",
        "Easy"
    ],
    "basic-calculator-ii": [
        "Basic Calculator II",
        "Medium"
    ],
    "summary-ranges": [
        "Summary Ranges",
        "Easy"
    ],
    "majority-element-ii": [
        "Majority Element II",
        "Medium"
    ],
    "kth-smallest-element-in-a-bst": [
        "Kth Smallest Element in a BST",
        "Medium"
    ],
    "power-of-two": [
        "Power of Two",
        "Easy"
    ],
    "implement-queue-using-stacks": [
        "Implement Queue using Stacks",
        "Easy"
    ],
    "number-of-digit-one": [
        "Number of Digit One",
        "Hard"
    ],
    "palindrome-linked-list": [
        "Palindrome Linked List",
        "Easy"
    ],
    "lowest-common-ancestor-of-a-binary-search-tree": [
        "Lowest Common Ancestor of a Binary Search Tree",
        "Medium"
    ],
    "lowest-common-ancestor-of-a-binary-tree": [
        "Lowest Common Ancestor of a Binary Tree",
        "Medium"
    ],
    "delete-node-in-a-linked-list": [
        "Delete Node in a Linked List",
        "Medium"
    ],
    "product-of-array-except-self": [
        "Product of Array Except Self",
        "Medium"
    ],
    "sliding-window-maximum": [
        "Sliding Window Maximum",
        "Hard"
    ],
    "search-a-2d-matrix-ii": [
        "Search a 2D Matrix II",
        "Medium"
    ],
    "different-ways-to-add-parentheses": [
        "Different Ways to Add Parentheses",
        "Medium"
    ],
    "valid-anagram": [
        "Valid Anagram",
        "Easy"
    ],
    "binary-tree-paths": [
        "Binary Tree Paths",
        "Easy"
    ],
    "add-digits": [
        "Add Digits",
        "Easy"
    ],
    "single-number-iii": [
        "Single Number III",
        "Medium"
    ],
    "trips-and-users": [
        "Trips and Users",
        "Hard"
    ],
    "ugly-number": [
        "Ugly Number",
        "Easy"
    ],
    "ugly-number-ii": [
        "Ugly Number II",
        "Medium"
    ],
    "missing-number": [
        "Missing Number",
        "Easy"
    ],
    "integer-to-english-words": [
        "Integer to English Words",
        "Hard"
    ],
    "h-index": [
        "H-Index",
        "Medium"
    ],
    "h-index-ii": [
        "H-Index II",
        "Medium"
    ],
    "first-bad-version": [
        "First Bad Version",
        "Easy"
    ],
    "perfect-squares": [
        "Perfect Squares",
        "Medium"
    ],
    "expression-add-operators": [
        "Expression Add Operators",
        "Hard"
    ],
    "move-zeroes": [
        "Move Zeroes",
        "Easy"
    ],
    "peeking-iterator": [
        "Peeking Iterator",
        "Medium"
    ],
    "find-the-duplicate-number": [
        "Find the Duplicate Number",
        "Medium"
    ],
    "game-of-life": [
        "Game of Life",
        "Medium"
    ],
    "word-pattern": [
        "Word Pattern",
        "Easy"
    ],
    "nim-game": [
        "Nim Game",
        "Easy"
    ],
    "find-median-from-data-stream": [
        "Find Median from Data Stream",
        "Hard"
    ],
    "serialize-and-deserialize-binary-tree": [
        "Serialize and Deserialize Binary Tree",
        "Hard"
    ],
    "bulls-and-cows": [
        "Bulls and Cows",
        "Medium"
    ],
    "longest-increasing-subsequence": [
        "Longest Increasing Subsequence",
        "Medium"
    ],
    "remove-invalid-parentheses": [
        "Remove Invalid Parentheses",
        "Hard"
    ],
    "range-sum-query-immutable": [
        "Range Sum Query - Immutable",
        "Easy"
    ],
    "range-sum-query-2d-immutable": [
        "Range Sum Query 2D - Immutable",
        "Medium"
    ],
    "additive-number": [
        "Additive Number",
        "Medium"
    ],
    "range-sum-query-mutable": [
        "Range Sum Query - Mutable",
        "Medium"
    ],
    "best-time-to-buy-and-sell-stock-with-cooldown": [
        "Best Time to Buy and Sell Stock with Cooldown",
        "Medium"
    ],
    "minimum-height-trees": [
        "Minimum Height Trees",
        "Medium"
    ],
    "burst-balloons": [
        "Burst Balloons",
        "Hard"
    ],
    "super-ugly-number": [
        "Super Ugly Number",
        "Medium"
    ],
    "count-of-smaller-numbers-after-self": [
        "Count of Smaller Numbers After Self",
        "Hard"
    ],
    "remove-duplicate-letters": [
        "Remove Duplicate Letters",
        "Medium"
    ],
    "maximum-product-of-word-lengths": [
        "Maximum Product of Word Lengths",
        "Medium"
    ],
    "bulb-switcher": [
        "Bulb Switcher",
        "Medium"
    ],
    "create-maximum-number": [
        "Create Maximum Number",
        "Hard"
    ],
    "coin-change": [
        "Coin Change",
        "Medium"
    ],
    "wiggle-sort-ii": [
        "Wiggle Sort II",
        "Medium"
    ],
    "power-of-three": [
        "Power of Three",
        "Easy"
    ],
    "count-of-range-sum": [
        "Count of Range Sum",
        "Hard"
    ],
    "odd-even-linked-list": [
        "Odd Even Linked List",
        "Medium"
    ],
    "longest-increasing-path-in-a-matrix": [
        "Longest Increasing Path in a Matrix",
        "Hard"
    ],
    "patching-array": [
        "Patching Array",
        "Hard"
    ],
    "verify-preorder-serialization-of-a-binary-tree": [
        "Verify Preorder Serialization of a Binary Tree",
        "Medium"
    ],
    "reconstruct-itinerary": [
        "Reconstruct Itinerary",
        "Hard"
    ],
    "increasing-triplet-subsequence": [
        "Increasing Triplet Subsequence",
        "Medium"
    ],
    "self-crossing": [
        "Self Crossing",
        "Hard"
    ],
    "palindrome-pairs": [
        "Palindrome Pairs",
        "Hard"
    ],
    "house-robber-iii": [
        "House Robber III",
        "Medium"
    ],
    "counting-bits": [
        "Counting Bits",
        "Easy"
    ],
    "flatten-nested-list-iterator": [
        "Flatten Nested List Iterator",
        "Medium"
    ],
    "power-of-four": [
        "Power of Four",
        "Easy"
    ],
    "integer-break": [
        "Integer Break",
        "Medium"
    ],
    "reverse-string": [
        "Reverse String",
        "Easy"
    ],
    "reverse-vowels-of-a-string": [
        "Reverse Vowels of a String",
        "Easy"
    ],
    "top-k-frequent-elements": [
        "Top K Frequent Elements",
        "Medium"
    ],
    "intersection-of-two-arrays": [
        "Intersection of Two Arrays",
        "Easy"
    ],
    "intersection-of-two-arrays-ii": [
        "Intersection of Two Arrays II",
        "Easy"
    ],
    "data-stream-as-disjoint-intervals": [
        "Data Stream as Disjoint Intervals",
        "Hard"
    ],
    "russian-doll-envelopes": [
        "Russian Doll Envelopes",
        "Hard"
    ],
    "design-twitter": [
        "Design Twitter",
        "Medium"
    ],
    "count-numbers-with-unique-digits": [
        "Count Numbers with Unique Digits",
        "Medium"
    ],
    "max-sum-of-rectangle-no-larger-than-k": [
        "Max Sum of Rectangle No Larger Than K",
        "Hard"
    ],
    "water-and-jug-problem": [
        "Water and Jug Problem",
        "Medium"
    ],
    "valid-perfect-square": [
        "Valid Perfect Square",
        "Easy"
    ],
    "largest-divisible-subset": [
        "Largest Divisible Subset",
        "Medium"
    ],
    "sum-of-two-integers": [
        "Sum of Two Integers",
        "Medium"
    ],
    "super-pow": [
        "Super Pow",
        "Medium"
    ],
    "find-k-pairs-with-smallest-sums": [
        "Find K Pairs with Smallest Sums",
        "Medium"
    ],
    "guess-number-higher-or-lower": [
        "Guess Number Higher or Lower",
        "Easy"
    ],
    "guess-number-higher-or-lower-ii": [
        "Guess Number Higher or Lower II",
        "Medium"
    ],
    "wiggle-subsequence": [
        "Wiggle Subsequence",
        "Medium"
    ],
    "combination-sum-iv": [
        "Combination Sum IV",
        "Medium"
    ],
    "kth-smallest-element-in-a-sorted-matrix": [
        "Kth Smallest Element in a Sorted Matrix",
        "Medium"
    ],
    "insert-delete-getrandom-o1": [
        "Insert Delete GetRandom O(1)",
        "Medium"
    ],
    "insert-delete-getrandom-o1-duplicates-allowed": [
        "Insert Delete GetRandom O(1) - Duplicates allowed",
        "Hard"
    ],
    "linked-list-random-node": [
        "Linked List Random Node",
        "Medium"
    ],
    "ransom-note": [
        "Ransom Note",
        "Easy"
    ],
    "shuffle-an-array": [
        "Shuffle an Array",
        "Medium"
    ],
    "mini-parser": [
        "Mini Parser",
        "Medium"
    ],
    "lexicographical-numbers": [
        "Lexicographical Numbers",
        "Medium"
    ],
    "first-unique-character-in-a-string": [
        "First Unique Character in a String",
        "Easy"
    ],
    "longest-absolute-file-path": [
        "Longest Absolute File Path",
        "Medium"
    ],
    "find-the-difference": [
        "Find the Difference",
        "Easy"
    ],
    "elimination-game": [
        "Elimination Game",
        "Medium"
    ],
    "perfect-rectangle": [
        "Perfect Rectangle",
        "Hard"
    ],
    "is-subsequence": [
        "Is Subsequence",
        "Easy"
    ],
    "utf-8-validation": [
        "UTF-8 Validation",
        "Medium"
    ],
    "decode-string": [
        "Decode String",
        "Medium"
    ],
    "longest-substring-with-at-least-k-repeating-characters": [
        "Longest Substring with At Least K Repeating Characters",
        "Medium"
    ],
    "rotate-function": [
        "Rotate Function",
        "Medium"
    ],
    "integer-replacement": [
        "Integer Replacement",
        "Medium"
    ],
    "random-pick-index": [
        "Random Pick Index",
        "Medium"
    ],
    "evaluate-division": [
        "Evaluate Division",
        "Medium"
    ],
    "nth-digit": [
        "Nth Digit",
        "Medium"
    ],
    "binary-watch": [
        "Binary Watch",
        "Easy"
    ],
    "remove-k-digits": [
        "Remove K Digits",
        "Medium"
    ],
    "frog-jump": [
        "Frog Jump",
        "Hard"
    ],
    "sum-of-left-leaves": [
        "Sum of Left Leaves",
        "Easy"
    ],
    "convert-a-number-to-hexadecimal": [
        "Convert a Number to Hexadecimal",
        "Easy"
    ],
    "queue-reconstruction-by-height": [
        "Queue Reconstruction by Height",
        "Medium"
    ],
    "trapping-rain-water-ii": [
        "Trapping Rain Water II",
        "Hard"
    ],
    "longest-palindrome": [
        "Longest Palindrome",
        "Easy"
    ],
    "split-array-largest-sum": [
        "Split Array Largest Sum",
        "Hard"
    ],
    "fizz-buzz": [
        "Fizz Buzz",
        "Easy"
    ],
    "arithmetic-slices": [
        "Arithmetic Slices",
        "Medium"
    ],
    "third-maximum-number": [
        "Third Maximum Number",
        "Easy"
    ],
    "add-strings": [
        "Add Strings",
        "Easy"
    ],
    "partition-equal-subset-sum": [
        "Partition Equal Subset Sum",
        "Medium"
    ],
    "pacific-atlantic-water-flow": [
        "Pacific Atlantic Water Flow",
        "Medium"
    ],
    "battleships-in-a-board": [
        "Battleships in a Board",
        "Medium"
    ],
    "strong-password-checker": [
        "Strong Password Checker",
        "Hard"
    ],
    "maximum-xor-of-two-numbers-in-an-array": [
        "Maximum XOR of Two Numbers in an Array",
        "Medium"
    ],
    "reconstruct-original-digits-from-english": [
        "Reconstruct Original Digits from English",
        "Medium"
    ],
    "longest-repeating-character-replacement": [
        "Longest Repeating Character Replacement",
        "Medium"
    ],
    "construct-quad-tree": [
        "Construct Quad Tree",
        "Medium"
    ],
    "n-ary-tree-level-order-traversal": [
        "N-ary Tree Level Order Traversal",
        "Medium"
    ],
    "flatten-a-multilevel-doubly-linked-list": [
        "Flatten a Multilevel Doubly Linked List",
        "Medium"
    ],
    "all-oone-data-structure": [
        "All O`one Data Structure",
        "Hard"
    ],
    "minimum-genetic-mutation": [
        "Minimum Genetic Mutation",
        "Medium"
    ],
    "number-of-segments-in-a-string": [
        "Number of Segments in a String",
        "Easy"
    ],
    "non-overlapping-intervals": [
        "Non-overlapping Intervals",
        "Medium"
    ],
    "find-right-interval": [
        "Find Right Interval",
        "Medium"
    ],
    "path-sum-iii": [
        "Path Sum III",
        "Medium"
    ],
    "find-all-anagrams-in-a-string": [
        "Find All Anagrams in a String",
        "Medium"
    ],
    "k-th-smallest-in-lexicographical-order": [
        "K-th Smallest in Lexicographical Order",
        "Hard"
    ],
    "arranging-coins": [
        "Arranging Coins",
        "Easy"
    ],
    "find-all-duplicates-in-an-array": [
        "Find All Duplicates in an Array",
        "Medium"
    ],
    "string-compression": [
        "String Compression",
        "Medium"
    ],
    "add-two-numbers-ii": [
        "Add Two Numbers II",
        "Medium"
    ],
    "arithmetic-slices-ii-subsequence": [
        "Arithmetic Slices II - Subsequence",
        "Hard"
    ],
    "number-of-boomerangs": [
        "Number of Boomerangs",
        "Medium"
    ],
    "find-all-numbers-disappeared-in-an-array": [
        "Find All Numbers Disappeared in an Array",
        "Easy"
    ],
    "serialize-and-deserialize-bst": [
        "Serialize and Deserialize BST",
        "Medium"
    ],
    "delete-node-in-a-bst": [
        "Delete Node in a BST",
        "Medium"
    ],
    "sort-characters-by-frequency": [
        "Sort Characters By Frequency",
        "Medium"
    ],
    "minimum-number-of-arrows-to-burst-balloons": [
        "Minimum Number of Arrows to Burst Balloons",
        "Medium"
    ],
    "minimum-moves-to-equal-array-elements": [
        "Minimum Moves to Equal Array Elements",
        "Medium"
    ],
    "4sum-ii": [
        "4Sum II",
        "Medium"
    ],
    "assign-cookies": [
        "Assign Cookies",
        "Easy"
    ],
    "132-pattern": [
        "132 Pattern",
        "Medium"
    ],
    "circular-array-loop": [
        "Circular Array Loop",
        "Medium"
    ],
    "poor-pigs": [
        "Poor Pigs",
        "Hard"
    ],
    "repeated-substring-pattern": [
        "Repeated Substring Pattern",
        "Easy"
    ],
    "lfu-cache": [
        "LFU Cache",
        "Hard"
    ],
    "hamming-distance": [
        "Hamming Distance",
        "Easy"
    ],
    "minimum-moves-to-equal-array-elements-ii": [
        "Minimum Moves to Equal Array Elements II",
        "Medium"
    ],
    "island-perimeter": [
        "Island Perimeter",
        "Easy"
    ],
    "can-i-win": [
        "Can I Win",
        "Medium"
    ],
    "count-the-repetitions": [
        "Count The Repetitions",
        "Hard"
    ],
    "unique-substrings-in-wraparound-string": [
        "Unique Substrings in Wraparound String",
        "Medium"
    ],
    "validate-ip-address": [
        "Validate IP Address",
        "Medium"
    ],
    "implement-rand10-using-rand7": [
        "Implement Rand10() Using Rand7()",
        "Medium"
    ],
    "concatenated-words": [
        "Concatenated Words",
        "Hard"
    ],
    "matchsticks-to-square": [
        "Matchsticks to Square",
        "Medium"
    ],
    "ones-and-zeroes": [
        "Ones and Zeroes",
        "Medium"
    ],
    "heaters": [
        "Heaters",
        "Medium"
    ],
    "number-complement": [
        "Number Complement",
        "Easy"
    ],
    "total-hamming-distance": [
        "Total Hamming Distance",
        "Medium"
    ],
    "generate-random-point-in-a-circle": [
        "Generate Random Point in a Circle",
        "Medium"
    ],
    "largest-palindrome-product": [
        "Largest Palindrome Product",
        "Hard"
    ],
    "sliding-window-median": [
        "Sliding Window Median",
        "Hard"
    ],
    "magical-string": [
        "Magical String",
        "Medium"
    ],
    "license-key-formatting": [
        "License Key Formatting",
        "Easy"
    ],
    "smallest-good-base": [
        "Smallest Good Base",
        "Hard"
    ],
    "max-consecutive-ones": [
        "Max Consecutive Ones",
        "Easy"
    ],
    "predict-the-winner": [
        "Predict the Winner",
        "Medium"
    ],
    "zuma-game": [
        "Zuma Game",
        "Hard"
    ],
    "increasing-subsequences": [
        "Increasing Subsequences",
        "Medium"
    ],
    "construct-the-rectangle": [
        "Construct the Rectangle",
        "Easy"
    ],
    "reverse-pairs": [
        "Reverse Pairs",
        "Hard"
    ],
    "target-sum": [
        "Target Sum",
        "Medium"
    ],
    "teemo-attacking": [
        "Teemo Attacking",
        "Easy"
    ],
    "next-greater-element-i": [
        "Next Greater Element I",
        "Easy"
    ],
    "random-point-in-non-overlapping-rectangles": [
        "Random Point in Non-overlapping Rectangles",
        "Medium"
    ],
    "diagonal-traverse": [
        "Diagonal Traverse",
        "Medium"
    ],
    "keyboard-row": [
        "Keyboard Row",
        "Easy"
    ],
    "find-mode-in-binary-search-tree": [
        "Find Mode in Binary Search Tree",
        "Easy"
    ],
    "ipo": [
        "IPO",
        "Hard"
    ],
    "next-greater-element-ii": [
        "Next Greater Element II",
        "Medium"
    ],
    "base-7": [
        "Base 7",
        "Easy"
    ],
    "relative-ranks": [
        "Relative Ranks",
        "Easy"
    ],
    "perfect-number": [
        "Perfect Number",
        "Easy"
    ],
    "most-frequent-subtree-sum": [
        "Most Frequent Subtree Sum",
        "Medium"
    ],
    "fibonacci-number": [
        "Fibonacci Number",
        "Easy"
    ],
    "game-play-analysis-i": [
        "Game Play Analysis I",
        "Easy"
    ],
    "find-bottom-left-tree-value": [
        "Find Bottom Left Tree Value",
        "Medium"
    ],
    "freedom-trail": [
        "Freedom Trail",
        "Hard"
    ],
    "find-largest-value-in-each-tree-row": [
        "Find Largest Value in Each Tree Row",
        "Medium"
    ],
    "longest-palindromic-subsequence": [
        "Longest Palindromic Subsequence",
        "Medium"
    ],
    "super-washing-machines": [
        "Super Washing Machines",
        "Hard"
    ],
    "coin-change-ii": [
        "Coin Change II",
        "Medium"
    ],
    "random-flip-matrix": [
        "Random Flip Matrix",
        "Medium"
    ],
    "detect-capital": [
        "Detect Capital",
        "Easy"
    ],
    "longest-uncommon-subsequence-i": [
        "Longest Uncommon Subsequence I",
        "Easy"
    ],
    "longest-uncommon-subsequence-ii": [
        "Longest Uncommon Subsequence II",
        "Medium"
    ],
    "continuous-subarray-sum": [
        "Continuous Subarray Sum",
        "Medium"
    ],
    "longest-word-in-dictionary-through-deleting": [
        "Longest Word in Dictionary through Deleting",
        "Medium"
    ],
    "contiguous-array": [
        "Contiguous Array",
        "Medium"
    ],
    "beautiful-arrangement": [
        "Beautiful Arrangement",
        "Medium"
    ],
    "random-pick-with-weight": [
        "Random Pick with Weight",
        "Medium"
    ],
    "minesweeper": [
        "Minesweeper",
        "Medium"
    ],
    "minimum-absolute-difference-in-bst": [
        "Minimum Absolute Difference in BST",
        "Easy"
    ],
    "k-diff-pairs-in-an-array": [
        "K-diff Pairs in an Array",
        "Medium"
    ],
    "encode-and-decode-tinyurl": [
        "Encode and Decode TinyURL",
        "Medium"
    ],
    "complex-number-multiplication": [
        "Complex Number Multiplication",
        "Medium"
    ],
    "convert-bst-to-greater-tree": [
        "Convert BST to Greater Tree",
        "Medium"
    ],
    "minimum-time-difference": [
        "Minimum Time Difference",
        "Medium"
    ],
    "single-element-in-a-sorted-array": [
        "Single Element in a Sorted Array",
        "Medium"
    ],
    "reverse-string-ii": [
        "Reverse String II",
        "Easy"
    ],
    "01-matrix": [
        "01 Matrix",
        "Medium"
    ],
    "diameter-of-binary-tree": [
        "Diameter of Binary Tree",
        "Easy"
    ],
    "remove-boxes": [
        "Remove Boxes",
        "Hard"
    ],
    "number-of-provinces": [
        "Number of Provinces",
        "Medium"
    ],
    "student-attendance-record-i": [
        "Student Attendance Record I",
        "Easy"
    ],
    "student-attendance-record-ii": [
        "Student Attendance Record II",
        "Hard"
    ],
    "optimal-division": [
        "Optimal Division",
        "Medium"
    ],
    "brick-wall": [
        "Brick Wall",
        "Medium"
    ],
    "next-greater-element-iii": [
        "Next Greater Element III",
        "Medium"
    ],
    "reverse-words-in-a-string-iii": [
        "Reverse Words in a String III",
        "Easy"
    ],
    "logical-or-of-two-binary-grids-represented-as-quad-trees": [
        "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "Medium"
    ],
    "maximum-depth-of-n-ary-tree": [
        "Maximum Depth of N-ary Tree",
        "Easy"
    ],
    "subarray-sum-equals-k": [
        "Subarray Sum Equals K",
        "Medium"
    ],
    "array-partition": [
        "Array Partition",
        "Easy"
    ],
    "binary-tree-tilt": [
        "Binary Tree Tilt",
        "Easy"
    ],
    "find-the-closest-palindrome": [
        "Find the Closest Palindrome",
        "Hard"
    ],
    "array-nesting": [
        "Array Nesting",
        "Medium"
    ],
    "reshape-the-matrix": [
        "Reshape the Matrix",
        "Easy"
    ],
    "permutation-in-string": [
        "Permutation in String",
        "Medium"
    ],
    "subtree-of-another-tree": [
        "Subtree of Another Tree",
        "Easy"
    ],
    "distribute-candies": [
        "Distribute Candies",
        "Easy"
    ],
    "out-of-boundary-paths": [
        "Out of Boundary Paths",
        "Medium"
    ],
    "shortest-unsorted-continuous-subarray": [
        "Shortest Unsorted Continuous Subarray",
        "Medium"
    ],
    "delete-operation-for-two-strings": [
        "Delete Operation for Two Strings",
        "Medium"
    ],
    "find-customer-referee": [
        "Find Customer Referee",
        "Easy"
    ],
    "customer-placing-the-largest-number-of-orders": [
        "Customer Placing the Largest Number of Orders",
        "Easy"
    ],
    "erect-the-fence": [
        "Erect the Fence",
        "Hard"
    ],
    "n-ary-tree-preorder-traversal": [
        "N-ary Tree Preorder Traversal",
        "Easy"
    ],
    "n-ary-tree-postorder-traversal": [
        "N-ary Tree Postorder Traversal",
        "Easy"
    ],
    "tag-validator": [
        "Tag Validator",
        "Hard"
    ],
    "fraction-addition-and-subtraction": [
        "Fraction Addition and Subtraction",
        "Medium"
    ],
    "valid-square": [
        "Valid Square",
        "Medium"
    ],
    "longest-harmonious-subsequence": [
        "Longest Harmonious Subsequence",
        "Easy"
    ],
    "big-countries": [
        "Big Countries",
        "Easy"
    ],
    "classes-more-than-5-students": [
        "Classes More Than 5 Students",
        "Easy"
    ],
    "range-addition-ii": [
        "Range Addition II",
        "Easy"
    ],
    "minimum-index-sum-of-two-lists": [
        "Minimum Index Sum of Two Lists",
        "Easy"
    ],
    "non-negative-integers-without-consecutive-ones": [
        "Non-negative Integers without Consecutive Ones",
        "Hard"
    ],
    "human-traffic-of-stadium": [
        "Human Traffic of Stadium",
        "Hard"
    ],
    "can-place-flowers": [
        "Can Place Flowers",
        "Easy"
    ],
    "construct-string-from-binary-tree": [
        "Construct String from Binary Tree",
        "Easy"
    ],
    "sales-person": [
        "Sales Person",
        "Easy"
    ],
    "tree-node": [
        "Tree Node",
        "Medium"
    ],
    "find-duplicate-file-in-system": [
        "Find Duplicate File in System",
        "Medium"
    ],
    "valid-triangle-number": [
        "Valid Triangle Number",
        "Medium"
    ],
    "merge-two-binary-trees": [
        "Merge Two Binary Trees",
        "Easy"
    ],
    "not-boring-movies": [
        "Not Boring Movies",
        "Easy"
    ],
    "task-scheduler": [
        "Task Scheduler",
        "Medium"
    ],
    "design-circular-queue": [
        "Design Circular Queue",
        "Medium"
    ],
    "add-one-row-to-tree": [
        "Add One Row to Tree",
        "Medium"
    ],
    "exchange-seats": [
        "Exchange Seats",
        "Medium"
    ],
    "swap-salary": [
        "Swap Salary",
        "Easy"
    ],
    "maximum-product-of-three-numbers": [
        "Maximum Product of Three Numbers",
        "Easy"
    ],
    "k-inverse-pairs-array": [
        "K Inverse Pairs Array",
        "Hard"
    ],
    "course-schedule-iii": [
        "Course Schedule III",
        "Hard"
    ],
    "smallest-range-covering-elements-from-k-lists": [
        "Smallest Range Covering Elements from K Lists",
        "Hard"
    ],
    "sum-of-square-numbers": [
        "Sum of Square Numbers",
        "Medium"
    ],
    "exclusive-time-of-functions": [
        "Exclusive Time of Functions",
        "Medium"
    ],
    "average-of-levels-in-binary-tree": [
        "Average of Levels in Binary Tree",
        "Easy"
    ],
    "shopping-offers": [
        "Shopping Offers",
        "Medium"
    ],
    "decode-ways-ii": [
        "Decode Ways II",
        "Hard"
    ],
    "solve-the-equation": [
        "Solve the Equation",
        "Medium"
    ],
    "design-circular-deque": [
        "Design Circular Deque",
        "Medium"
    ],
    "maximum-average-subarray-i": [
        "Maximum Average Subarray I",
        "Easy"
    ],
    "set-mismatch": [
        "Set Mismatch",
        "Easy"
    ],
    "maximum-length-of-pair-chain": [
        "Maximum Length of Pair Chain",
        "Medium"
    ],
    "palindromic-substrings": [
        "Palindromic Substrings",
        "Medium"
    ],
    "replace-words": [
        "Replace Words",
        "Medium"
    ],
    "dota2-senate": [
        "Dota2 Senate",
        "Medium"
    ],
    "2-keys-keyboard": [
        "2 Keys Keyboard",
        "Medium"
    ],
    "find-duplicate-subtrees": [
        "Find Duplicate Subtrees",
        "Medium"
    ],
    "two-sum-iv-input-is-a-bst": [
        "Two Sum IV - Input is a BST",
        "Easy"
    ],
    "maximum-binary-tree": [
        "Maximum Binary Tree",
        "Medium"
    ],
    "print-binary-tree": [
        "Print Binary Tree",
        "Medium"
    ],
    "robot-return-to-origin": [
        "Robot Return to Origin",
        "Easy"
    ],
    "find-k-closest-elements": [
        "Find K Closest Elements",
        "Medium"
    ],
    "split-array-into-consecutive-subsequences": [
        "Split Array into Consecutive Subsequences",
        "Medium"
    ],
    "image-smoother": [
        "Image Smoother",
        "Easy"
    ],
    "maximum-width-of-binary-tree": [
        "Maximum Width of Binary Tree",
        "Medium"
    ],
    "strange-printer": [
        "Strange Printer",
        "Hard"
    ],
    "non-decreasing-array": [
        "Non-decreasing Array",
        "Medium"
    ],
    "beautiful-arrangement-ii": [
        "Beautiful Arrangement II",
        "Medium"
    ],
    "kth-smallest-number-in-multiplication-table": [
        "Kth Smallest Number in Multiplication Table",
        "Hard"
    ],
    "trim-a-binary-search-tree": [
        "Trim a Binary Search Tree",
        "Medium"
    ],
    "maximum-swap": [
        "Maximum Swap",
        "Medium"
    ],
    "second-minimum-node-in-a-binary-tree": [
        "Second Minimum Node In a Binary Tree",
        "Easy"
    ],
    "bulb-switcher-ii": [
        "Bulb Switcher II",
        "Medium"
    ],
    "number-of-longest-increasing-subsequence": [
        "Number of Longest Increasing Subsequence",
        "Medium"
    ],
    "longest-continuous-increasing-subsequence": [
        "Longest Continuous Increasing Subsequence",
        "Easy"
    ],
    "cut-off-trees-for-golf-event": [
        "Cut Off Trees for Golf Event",
        "Hard"
    ],
    "implement-magic-dictionary": [
        "Implement Magic Dictionary",
        "Medium"
    ],
    "map-sum-pairs": [
        "Map Sum Pairs",
        "Medium"
    ],
    "valid-parenthesis-string": [
        "Valid Parenthesis String",
        "Medium"
    ],
    "24-game": [
        "24 Game",
        "Hard"
    ],
    "valid-palindrome-ii": [
        "Valid Palindrome II",
        "Easy"
    ],
    "baseball-game": [
        "Baseball Game",
        "Easy"
    ],
    "redundant-connection": [
        "Redundant Connection",
        "Medium"
    ],
    "redundant-connection-ii": [
        "Redundant Connection II",
        "Hard"
    ],
    "repeated-string-match": [
        "Repeated String Match",
        "Medium"
    ],
    "longest-univalue-path": [
        "Longest Univalue Path",
        "Medium"
    ],
    "knight-probability-in-chessboard": [
        "Knight Probability in Chessboard",
        "Medium"
    ],
    "maximum-sum-of-3-non-overlapping-subarrays": [
        "Maximum Sum of 3 Non-Overlapping Subarrays",
        "Hard"
    ],
    "employee-importance": [
        "Employee Importance",
        "Medium"
    ],
    "stickers-to-spell-word": [
        "Stickers to Spell Word",
        "Hard"
    ],
    "top-k-frequent-words": [
        "Top K Frequent Words",
        "Medium"
    ],
    "binary-number-with-alternating-bits": [
        "Binary Number with Alternating Bits",
        "Easy"
    ],
    "max-area-of-island": [
        "Max Area of Island",
        "Medium"
    ],
    "count-binary-substrings": [
        "Count Binary Substrings",
        "Easy"
    ],
    "degree-of-an-array": [
        "Degree of an Array",
        "Easy"
    ],
    "partition-to-k-equal-sum-subsets": [
        "Partition to K Equal Sum Subsets",
        "Medium"
    ],
    "falling-squares": [
        "Falling Squares",
        "Hard"
    ],
    "search-in-a-binary-search-tree": [
        "Search in a Binary Search Tree",
        "Easy"
    ],
    "insert-into-a-binary-search-tree": [
        "Insert into a Binary Search Tree",
        "Medium"
    ],
    "kth-largest-element-in-a-stream": [
        "Kth Largest Element in a Stream",
        "Easy"
    ],
    "binary-search": [
        "Binary Search",
        "Easy"
    ],
    "design-hashset": [
        "Design HashSet",
        "Easy"
    ],
    "design-hashmap": [
        "Design HashMap",
        "Easy"
    ],
    "design-linked-list": [
        "Design Linked List",
        "Medium"
    ],
    "to-lower-case": [
        "To Lower Case",
        "Easy"
    ],
    "random-pick-with-blacklist": [
        "Random Pick with Blacklist",
        "Hard"
    ],
    "minimum-ascii-delete-sum-for-two-strings": [
        "Minimum ASCII Delete Sum for Two Strings",
        "Medium"
    ],
    "subarray-product-less-than-k": [
        "Subarray Product Less Than K",
        "Medium"
    ],
    "best-time-to-buy-and-sell-stock-with-transaction-fee": [
        "Best Time to Buy and Sell Stock with Transaction Fee",
        "Medium"
    ],
    "range-module": [
        "Range Module",
        "Hard"
    ],
    "1-bit-and-2-bit-characters": [
        "1-bit and 2-bit Characters",
        "Easy"
    ],
    "maximum-length-of-repeated-subarray": [
        "Maximum Length of Repeated Subarray",
        "Medium"
    ],
    "find-k-th-smallest-pair-distance": [
        "Find K-th Smallest Pair Distance",
        "Hard"
    ],
    "longest-word-in-dictionary": [
        "Longest Word in Dictionary",
        "Medium"
    ],
    "accounts-merge": [
        "Accounts Merge",
        "Medium"
    ],
    "remove-comments": [
        "Remove Comments",
        "Medium"
    ],
    "find-pivot-index": [
        "Find Pivot Index",
        "Easy"
    ],
    "split-linked-list-in-parts": [
        "Split Linked List in Parts",
        "Medium"
    ],
    "number-of-atoms": [
        "Number of Atoms",
        "Hard"
    ],
    "self-dividing-numbers": [
        "Self Dividing Numbers",
        "Easy"
    ],
    "my-calendar-i": [
        "My Calendar I",
        "Medium"
    ],
    "count-different-palindromic-subsequences": [
        "Count Different Palindromic Subsequences",
        "Hard"
    ],
    "my-calendar-ii": [
        "My Calendar II",
        "Medium"
    ],
    "my-calendar-iii": [
        "My Calendar III",
        "Hard"
    ],
    "flood-fill": [
        "Flood Fill",
        "Easy"
    ],
    "asteroid-collision": [
        "Asteroid Collision",
        "Medium"
    ],
    "parse-lisp-expression": [
        "Parse Lisp Expression",
        "Hard"
    ],
    "monotone-increasing-digits": [
        "Monotone Increasing Digits",
        "Medium"
    ],
    "daily-temperatures": [
        "Daily Temperatures",
        "Medium"
    ],
    "delete-and-earn": [
        "Delete and Earn",
        "Medium"
    ],
    "cherry-pickup": [
        "Cherry Pickup",
        "Hard"
    ],
    "network-delay-time": [
        "Network Delay Time",
        "Medium"
    ],
    "find-smallest-letter-greater-than-target": [
        "Find Smallest Letter Greater Than Target",
        "Easy"
    ],
    "prefix-and-suffix-search": [
        "Prefix and Suffix Search",
        "Hard"
    ],
    "min-cost-climbing-stairs": [
        "Min Cost Climbing Stairs",
        "Easy"
    ],
    "largest-number-at-least-twice-of-others": [
        "Largest Number At Least Twice of Others",
        "Easy"
    ],
    "shortest-completing-word": [
        "Shortest Completing Word",
        "Easy"
    ],
    "contain-virus": [
        "Contain Virus",
        "Hard"
    ],
    "open-the-lock": [
        "Open the Lock",
        "Medium"
    ],
    "cracking-the-safe": [
        "Cracking the Safe",
        "Hard"
    ],
    "reach-a-number": [
        "Reach a Number",
        "Medium"
    ],
    "pyramid-transition-matrix": [
        "Pyramid Transition Matrix",
        "Medium"
    ],
    "set-intersection-size-at-least-two": [
        "Set Intersection Size At Least Two",
        "Hard"
    ],
    "special-binary-string": [
        "Special Binary String",
        "Hard"
    ],
    "prime-number-of-set-bits-in-binary-representation": [
        "Prime Number of Set Bits in Binary Representation",
        "Easy"
    ],
    "partition-labels": [
        "Partition Labels",
        "Medium"
    ],
    "largest-plus-sign": [
        "Largest Plus Sign",
        "Medium"
    ],
    "couples-holding-hands": [
        "Couples Holding Hands",
        "Hard"
    ],
    "toeplitz-matrix": [
        "Toeplitz Matrix",
        "Easy"
    ],
    "reorganize-string": [
        "Reorganize String",
        "Medium"
    ],
    "max-chunks-to-make-sorted-ii": [
        "Max Chunks To Make Sorted II",
        "Hard"
    ],
    "max-chunks-to-make-sorted": [
        "Max Chunks To Make Sorted",
        "Medium"
    ],
    "basic-calculator-iv": [
        "Basic Calculator IV",
        "Hard"
    ],
    "jewels-and-stones": [
        "Jewels and Stones",
        "Easy"
    ],
    "sliding-puzzle": [
        "Sliding Puzzle",
        "Hard"
    ],
    "global-and-local-inversions": [
        "Global and Local Inversions",
        "Medium"
    ],
    "swap-adjacent-in-lr-string": [
        "Swap Adjacent in LR String",
        "Medium"
    ],
    "swim-in-rising-water": [
        "Swim in Rising Water",
        "Hard"
    ],
    "k-th-symbol-in-grammar": [
        "K-th Symbol in Grammar",
        "Medium"
    ],
    "reaching-points": [
        "Reaching Points",
        "Hard"
    ],
    "rabbits-in-forest": [
        "Rabbits in Forest",
        "Medium"
    ],
    "transform-to-chessboard": [
        "Transform to Chessboard",
        "Hard"
    ],
    "minimum-distance-between-bst-nodes": [
        "Minimum Distance Between BST Nodes",
        "Easy"
    ],
    "letter-case-permutation": [
        "Letter Case Permutation",
        "Medium"
    ],
    "is-graph-bipartite": [
        "Is Graph Bipartite?",
        "Medium"
    ],
    "k-th-smallest-prime-fraction": [
        "K-th Smallest Prime Fraction",
        "Medium"
    ],
    "cheapest-flights-within-k-stops": [
        "Cheapest Flights Within K Stops",
        "Medium"
    ],
    "rotated-digits": [
        "Rotated Digits",
        "Medium"
    ],
    "escape-the-ghosts": [
        "Escape The Ghosts",
        "Medium"
    ],
    "domino-and-tromino-tiling": [
        "Domino and Tromino Tiling",
        "Medium"
    ],
    "custom-sort-string": [
        "Custom Sort String",
        "Medium"
    ],
    "number-of-matching-subsequences": [
        "Number of Matching Subsequences",
        "Medium"
    ],
    "preimage-size-of-factorial-zeroes-function": [
        "Preimage Size of Factorial Zeroes Function",
        "Hard"
    ],
    "valid-tic-tac-toe-state": [
        "Valid Tic-Tac-Toe State",
        "Medium"
    ],
    "number-of-subarrays-with-bounded-maximum": [
        "Number of Subarrays with Bounded Maximum",
        "Medium"
    ],
    "rotate-string": [
        "Rotate String",
        "Easy"
    ],
    "all-paths-from-source-to-target": [
        "All Paths From Source to Target",
        "Medium"
    ],
    "smallest-rotation-with-highest-score": [
        "Smallest Rotation with Highest Score",
        "Hard"
    ],
    "champagne-tower": [
        "Champagne Tower",
        "Medium"
    ],
    "minimum-swaps-to-make-sequences-increasing": [
        "Minimum Swaps To Make Sequences Increasing",
        "Hard"
    ],
    "find-eventual-safe-states": [
        "Find Eventual Safe States",
        "Medium"
    ],
    "bricks-falling-when-hit": [
        "Bricks Falling When Hit",
        "Hard"
    ],
    "unique-morse-code-words": [
        "Unique Morse Code Words",
        "Easy"
    ],
    "split-array-with-same-average": [
        "Split Array With Same Average",
        "Hard"
    ],
    "number-of-lines-to-write-string": [
        "Number of Lines To Write String",
        "Easy"
    ],
    "max-increase-to-keep-city-skyline": [
        "Max Increase to Keep City Skyline",
        "Medium"
    ],
    "soup-servings": [
        "Soup Servings",
        "Medium"
    ],
    "expressive-words": [
        "Expressive Words",
        "Medium"
    ],
    "chalkboard-xor-game": [
        "Chalkboard XOR Game",
        "Hard"
    ],
    "subdomain-visit-count": [
        "Subdomain Visit Count",
        "Medium"
    ],
    "largest-triangle-area": [
        "Largest Triangle Area",
        "Easy"
    ],
    "largest-sum-of-averages": [
        "Largest Sum of Averages",
        "Medium"
    ],
    "binary-tree-pruning": [
        "Binary Tree Pruning",
        "Medium"
    ],
    "bus-routes": [
        "Bus Routes",
        "Hard"
    ],
    "ambiguous-coordinates": [
        "Ambiguous Coordinates",
        "Medium"
    ],
    "linked-list-components": [
        "Linked List Components",
        "Medium"
    ],
    "race-car": [
        "Race Car",
        "Hard"
    ],
    "most-common-word": [
        "Most Common Word",
        "Easy"
    ],
    "short-encoding-of-words": [
        "Short Encoding of Words",
        "Medium"
    ],
    "shortest-distance-to-a-character": [
        "Shortest Distance to a Character",
        "Easy"
    ],
    "card-flipping-game": [
        "Card Flipping Game",
        "Medium"
    ],
    "binary-trees-with-factors": [
        "Binary Trees With Factors",
        "Medium"
    ],
    "goat-latin": [
        "Goat Latin",
        "Easy"
    ],
    "friends-of-appropriate-ages": [
        "Friends Of Appropriate Ages",
        "Medium"
    ],
    "most-profit-assigning-work": [
        "Most Profit Assigning Work",
        "Medium"
    ],
    "making-a-large-island": [
        "Making A Large Island",
        "Hard"
    ],
    "count-unique-characters-of-all-substrings-of-a-given-string": [
        "Count Unique Characters of All Substrings of a Given String",
        "Hard"
    ],
    "consecutive-numbers-sum": [
        "Consecutive Numbers Sum",
        "Hard"
    ],
    "positions-of-large-groups": [
        "Positions of Large Groups",
        "Easy"
    ],
    "masking-personal-information": [
        "Masking Personal Information",
        "Medium"
    ],
    "flipping-an-image": [
        "Flipping an Image",
        "Easy"
    ],
    "find-and-replace-in-string": [
        "Find And Replace in String",
        "Medium"
    ],
    "sum-of-distances-in-tree": [
        "Sum of Distances in Tree",
        "Hard"
    ],
    "image-overlap": [
        "Image Overlap",
        "Medium"
    ],
    "rectangle-overlap": [
        "Rectangle Overlap",
        "Easy"
    ],
    "new-21-game": [
        "New 21 Game",
        "Medium"
    ],
    "push-dominoes": [
        "Push Dominoes",
        "Medium"
    ],
    "similar-string-groups": [
        "Similar String Groups",
        "Hard"
    ],
    "magic-squares-in-grid": [
        "Magic Squares In Grid",
        "Medium"
    ],
    "keys-and-rooms": [
        "Keys and Rooms",
        "Medium"
    ],
    "split-array-into-fibonacci-sequence": [
        "Split Array into Fibonacci Sequence",
        "Medium"
    ],
    "guess-the-word": [
        "Guess the Word",
        "Hard"
    ],
    "backspace-string-compare": [
        "Backspace String Compare",
        "Easy"
    ],
    "longest-mountain-in-array": [
        "Longest Mountain in Array",
        "Medium"
    ],
    "hand-of-straights": [
        "Hand of Straights",
        "Medium"
    ],
    "shortest-path-visiting-all-nodes": [
        "Shortest Path Visiting All Nodes",
        "Hard"
    ],
    "shifting-letters": [
        "Shifting Letters",
        "Medium"
    ],
    "maximize-distance-to-closest-person": [
        "Maximize Distance to Closest Person",
        "Medium"
    ],
    "rectangle-area-ii": [
        "Rectangle Area II",
        "Hard"
    ],
    "loud-and-rich": [
        "Loud and Rich",
        "Medium"
    ],
    "peak-index-in-a-mountain-array": [
        "Peak Index in a Mountain Array",
        "Medium"
    ],
    "car-fleet": [
        "Car Fleet",
        "Medium"
    ],
    "k-similar-strings": [
        "K-Similar Strings",
        "Hard"
    ],
    "exam-room": [
        "Exam Room",
        "Medium"
    ],
    "score-of-parentheses": [
        "Score of Parentheses",
        "Medium"
    ],
    "minimum-cost-to-hire-k-workers": [
        "Minimum Cost to Hire K Workers",
        "Hard"
    ],
    "mirror-reflection": [
        "Mirror Reflection",
        "Medium"
    ],
    "buddy-strings": [
        "Buddy Strings",
        "Easy"
    ],
    "lemonade-change": [
        "Lemonade Change",
        "Easy"
    ],
    "score-after-flipping-matrix": [
        "Score After Flipping Matrix",
        "Medium"
    ],
    "shortest-subarray-with-sum-at-least-k": [
        "Shortest Subarray with Sum at Least K",
        "Hard"
    ],
    "all-nodes-distance-k-in-binary-tree": [
        "All Nodes Distance K in Binary Tree",
        "Medium"
    ],
    "shortest-path-to-get-all-keys": [
        "Shortest Path to Get All Keys",
        "Hard"
    ],
    "smallest-subtree-with-all-the-deepest-nodes": [
        "Smallest Subtree with all the Deepest Nodes",
        "Medium"
    ],
    "prime-palindrome": [
        "Prime Palindrome",
        "Medium"
    ],
    "transpose-matrix": [
        "Transpose Matrix",
        "Easy"
    ],
    "binary-gap": [
        "Binary Gap",
        "Easy"
    ],
    "reordered-power-of-2": [
        "Reordered Power of 2",
        "Medium"
    ],
    "advantage-shuffle": [
        "Advantage Shuffle",
        "Medium"
    ],
    "minimum-number-of-refueling-stops": [
        "Minimum Number of Refueling Stops",
        "Hard"
    ],
    "leaf-similar-trees": [
        "Leaf-Similar Trees",
        "Easy"
    ],
    "length-of-longest-fibonacci-subsequence": [
        "Length of Longest Fibonacci Subsequence",
        "Medium"
    ],
    "walking-robot-simulation": [
        "Walking Robot Simulation",
        "Medium"
    ],
    "koko-eating-bananas": [
        "Koko Eating Bananas",
        "Medium"
    ],
    "middle-of-the-linked-list": [
        "Middle of the Linked List",
        "Easy"
    ],
    "stone-game": [
        "Stone Game",
        "Medium"
    ],
    "nth-magical-number": [
        "Nth Magical Number",
        "Hard"
    ],
    "profitable-schemes": [
        "Profitable Schemes",
        "Hard"
    ],
    "decoded-string-at-index": [
        "Decoded String at Index",
        "Medium"
    ],
    "boats-to-save-people": [
        "Boats to Save People",
        "Medium"
    ],
    "reachable-nodes-in-subdivided-graph": [
        "Reachable Nodes In Subdivided Graph",
        "Hard"
    ],
    "projection-area-of-3d-shapes": [
        "Projection Area of 3D Shapes",
        "Easy"
    ],
    "uncommon-words-from-two-sentences": [
        "Uncommon Words from Two Sentences",
        "Easy"
    ],
    "spiral-matrix-iii": [
        "Spiral Matrix III",
        "Medium"
    ],
    "possible-bipartition": [
        "Possible Bipartition",
        "Medium"
    ],
    "super-egg-drop": [
        "Super Egg Drop",
        "Hard"
    ],
    "fair-candy-swap": [
        "Fair Candy Swap",
        "Easy"
    ],
    "construct-binary-tree-from-preorder-and-postorder-traversal": [
        "Construct Binary Tree from Preorder and Postorder Traversal",
        "Medium"
    ],
    "find-and-replace-pattern": [
        "Find and Replace Pattern",
        "Medium"
    ],
    "sum-of-subsequence-widths": [
        "Sum of Subsequence Widths",
        "Hard"
    ],
    "surface-area-of-3d-shapes": [
        "Surface Area of 3D Shapes",
        "Easy"
    ],
    "groups-of-special-equivalent-strings": [
        "Groups of Special-Equivalent Strings",
        "Medium"
    ],
    "all-possible-full-binary-trees": [
        "All Possible Full Binary Trees",
        "Medium"
    ],
    "maximum-frequency-stack": [
        "Maximum Frequency Stack",
        "Hard"
    ],
    "monotonic-array": [
        "Monotonic Array",
        "Easy"
    ],
    "increasing-order-search-tree": [
        "Increasing Order Search Tree",
        "Easy"
    ],
    "bitwise-ors-of-subarrays": [
        "Bitwise ORs of Subarrays",
        "Medium"
    ],
    "orderly-queue": [
        "Orderly Queue",
        "Hard"
    ],
    "rle-iterator": [
        "RLE Iterator",
        "Medium"
    ],
    "online-stock-span": [
        "Online Stock Span",
        "Medium"
    ],
    "numbers-at-most-n-given-digit-set": [
        "Numbers At Most N Given Digit Set",
        "Hard"
    ],
    "valid-permutations-for-di-sequence": [
        "Valid Permutations for DI Sequence",
        "Hard"
    ],
    "fruit-into-baskets": [
        "Fruit Into Baskets",
        "Medium"
    ],
    "sort-array-by-parity": [
        "Sort Array By Parity",
        "Easy"
    ],
    "super-palindromes": [
        "Super Palindromes",
        "Hard"
    ],
    "sum-of-subarray-minimums": [
        "Sum of Subarray Minimums",
        "Medium"
    ],
    "smallest-range-i": [
        "Smallest Range I",
        "Easy"
    ],
    "snakes-and-ladders": [
        "Snakes and Ladders",
        "Medium"
    ],
    "smallest-range-ii": [
        "Smallest Range II",
        "Medium"
    ],
    "online-election": [
        "Online Election",
        "Medium"
    ],
    "sort-an-array": [
        "Sort an Array",
        "Medium"
    ],
    "cat-and-mouse": [
        "Cat and Mouse",
        "Hard"
    ],
    "x-of-a-kind-in-a-deck-of-cards": [
        "X of a Kind in a Deck of Cards",
        "Easy"
    ],
    "partition-array-into-disjoint-intervals": [
        "Partition Array into Disjoint Intervals",
        "Medium"
    ],
    "word-subsets": [
        "Word Subsets",
        "Medium"
    ],
    "reverse-only-letters": [
        "Reverse Only Letters",
        "Easy"
    ],
    "maximum-sum-circular-subarray": [
        "Maximum Sum Circular Subarray",
        "Medium"
    ],
    "complete-binary-tree-inserter": [
        "Complete Binary Tree Inserter",
        "Medium"
    ],
    "number-of-music-playlists": [
        "Number of Music Playlists",
        "Hard"
    ],
    "minimum-add-to-make-parentheses-valid": [
        "Minimum Add to Make Parentheses Valid",
        "Medium"
    ],
    "sort-array-by-parity-ii": [
        "Sort Array By Parity II",
        "Easy"
    ],
    "3sum-with-multiplicity": [
        "3Sum With Multiplicity",
        "Medium"
    ],
    "minimize-malware-spread": [
        "Minimize Malware Spread",
        "Hard"
    ],
    "long-pressed-name": [
        "Long Pressed Name",
        "Easy"
    ],
    "flip-string-to-monotone-increasing": [
        "Flip String to Monotone Increasing",
        "Medium"
    ],
    "three-equal-parts": [
        "Three Equal Parts",
        "Hard"
    ],
    "minimize-malware-spread-ii": [
        "Minimize Malware Spread II",
        "Hard"
    ],
    "unique-email-addresses": [
        "Unique Email Addresses",
        "Easy"
    ],
    "binary-subarrays-with-sum": [
        "Binary Subarrays With Sum",
        "Medium"
    ],
    "minimum-falling-path-sum": [
        "Minimum Falling Path Sum",
        "Medium"
    ],
    "beautiful-array": [
        "Beautiful Array",
        "Medium"
    ],
    "number-of-recent-calls": [
        "Number of Recent Calls",
        "Easy"
    ],
    "shortest-bridge": [
        "Shortest Bridge",
        "Medium"
    ],
    "knight-dialer": [
        "Knight Dialer",
        "Medium"
    ],
    "stamping-the-sequence": [
        "Stamping The Sequence",
        "Hard"
    ],
    "reorder-data-in-log-files": [
        "Reorder Data in Log Files",
        "Medium"
    ],
    "range-sum-of-bst": [
        "Range Sum of BST",
        "Easy"
    ],
    "minimum-area-rectangle": [
        "Minimum Area Rectangle",
        "Medium"
    ],
    "distinct-subsequences-ii": [
        "Distinct Subsequences II",
        "Hard"
    ],
    "valid-mountain-array": [
        "Valid Mountain Array",
        "Easy"
    ],
    "di-string-match": [
        "DI String Match",
        "Easy"
    ],
    "find-the-shortest-superstring": [
        "Find the Shortest Superstring",
        "Hard"
    ],
    "delete-columns-to-make-sorted": [
        "Delete Columns to Make Sorted",
        "Easy"
    ],
    "minimum-increment-to-make-array-unique": [
        "Minimum Increment to Make Array Unique",
        "Medium"
    ],
    "validate-stack-sequences": [
        "Validate Stack Sequences",
        "Medium"
    ],
    "most-stones-removed-with-same-row-or-column": [
        "Most Stones Removed with Same Row or Column",
        "Medium"
    ],
    "bag-of-tokens": [
        "Bag of Tokens",
        "Medium"
    ],
    "largest-time-for-given-digits": [
        "Largest Time for Given Digits",
        "Medium"
    ],
    "reveal-cards-in-increasing-order": [
        "Reveal Cards In Increasing Order",
        "Medium"
    ],
    "flip-equivalent-binary-trees": [
        "Flip Equivalent Binary Trees",
        "Medium"
    ],
    "largest-component-size-by-common-factor": [
        "Largest Component Size by Common Factor",
        "Hard"
    ],
    "verifying-an-alien-dictionary": [
        "Verifying an Alien Dictionary",
        "Easy"
    ],
    "array-of-doubled-pairs": [
        "Array of Doubled Pairs",
        "Medium"
    ],
    "delete-columns-to-make-sorted-ii": [
        "Delete Columns to Make Sorted II",
        "Medium"
    ],
    "tallest-billboard": [
        "Tallest Billboard",
        "Hard"
    ],
    "prison-cells-after-n-days": [
        "Prison Cells After N Days",
        "Medium"
    ],
    "check-completeness-of-a-binary-tree": [
        "Check Completeness of a Binary Tree",
        "Medium"
    ],
    "regions-cut-by-slashes": [
        "Regions Cut By Slashes",
        "Medium"
    ],
    "delete-columns-to-make-sorted-iii": [
        "Delete Columns to Make Sorted III",
        "Hard"
    ],
    "n-repeated-element-in-size-2n-array": [
        "N-Repeated Element in Size 2N Array",
        "Easy"
    ],
    "maximum-width-ramp": [
        "Maximum Width Ramp",
        "Medium"
    ],
    "minimum-area-rectangle-ii": [
        "Minimum Area Rectangle II",
        "Medium"
    ],
    "least-operators-to-express-number": [
        "Least Operators to Express Number",
        "Hard"
    ],
    "univalued-binary-tree": [
        "Univalued Binary Tree",
        "Easy"
    ],
    "vowel-spellchecker": [
        "Vowel Spellchecker",
        "Medium"
    ],
    "numbers-with-same-consecutive-differences": [
        "Numbers With Same Consecutive Differences",
        "Medium"
    ],
    "binary-tree-cameras": [
        "Binary Tree Cameras",
        "Hard"
    ],
    "pancake-sorting": [
        "Pancake Sorting",
        "Medium"
    ],
    "powerful-integers": [
        "Powerful Integers",
        "Medium"
    ],
    "flip-binary-tree-to-match-preorder-traversal": [
        "Flip Binary Tree To Match Preorder Traversal",
        "Medium"
    ],
    "equal-rational-numbers": [
        "Equal Rational Numbers",
        "Hard"
    ],
    "k-closest-points-to-origin": [
        "K Closest Points to Origin",
        "Medium"
    ],
    "subarray-sums-divisible-by-k": [
        "Subarray Sums Divisible by K",
        "Medium"
    ],
    "odd-even-jump": [
        "Odd Even Jump",
        "Hard"
    ],
    "largest-perimeter-triangle": [
        "Largest Perimeter Triangle",
        "Easy"
    ],
    "squares-of-a-sorted-array": [
        "Squares of a Sorted Array",
        "Easy"
    ],
    "longest-turbulent-subarray": [
        "Longest Turbulent Subarray",
        "Medium"
    ],
    "distribute-coins-in-binary-tree": [
        "Distribute Coins in Binary Tree",
        "Medium"
    ],
    "unique-paths-iii": [
        "Unique Paths III",
        "Hard"
    ],
    "time-based-key-value-store": [
        "Time Based Key-Value Store",
        "Medium"
    ],
    "triples-with-bitwise-and-equal-to-zero": [
        "Triples with Bitwise AND Equal To Zero",
        "Hard"
    ],
    "minimum-cost-for-tickets": [
        "Minimum Cost For Tickets",
        "Medium"
    ],
    "string-without-aaa-or-bbb": [
        "String Without AAA or BBB",
        "Medium"
    ],
    "sum-of-even-numbers-after-queries": [
        "Sum of Even Numbers After Queries",
        "Medium"
    ],
    "interval-list-intersections": [
        "Interval List Intersections",
        "Medium"
    ],
    "vertical-order-traversal-of-a-binary-tree": [
        "Vertical Order Traversal of a Binary Tree",
        "Hard"
    ],
    "smallest-string-starting-from-leaf": [
        "Smallest String Starting From Leaf",
        "Medium"
    ],
    "add-to-array-form-of-integer": [
        "Add to Array-Form of Integer",
        "Easy"
    ],
    "satisfiability-of-equality-equations": [
        "Satisfiability of Equality Equations",
        "Medium"
    ],
    "broken-calculator": [
        "Broken Calculator",
        "Medium"
    ],
    "subarrays-with-k-different-integers": [
        "Subarrays with K Different Integers",
        "Hard"
    ],
    "cousins-in-binary-tree": [
        "Cousins in Binary Tree",
        "Easy"
    ],
    "rotting-oranges": [
        "Rotting Oranges",
        "Medium"
    ],
    "minimum-number-of-k-consecutive-bit-flips": [
        "Minimum Number of K Consecutive Bit Flips",
        "Hard"
    ],
    "number-of-squareful-arrays": [
        "Number of Squareful Arrays",
        "Hard"
    ],
    "find-the-town-judge": [
        "Find the Town Judge",
        "Easy"
    ],
    "maximum-binary-tree-ii": [
        "Maximum Binary Tree II",
        "Medium"
    ],
    "available-captures-for-rook": [
        "Available Captures for Rook",
        "Easy"
    ],
    "minimum-cost-to-merge-stones": [
        "Minimum Cost to Merge Stones",
        "Hard"
    ],
    "grid-illumination": [
        "Grid Illumination",
        "Hard"
    ],
    "find-common-characters": [
        "Find Common Characters",
        "Easy"
    ],
    "check-if-word-is-valid-after-substitutions": [
        "Check If Word Is Valid After Substitutions",
        "Medium"
    ],
    "max-consecutive-ones-iii": [
        "Max Consecutive Ones III",
        "Medium"
    ],
    "maximize-sum-of-array-after-k-negations": [
        "Maximize Sum Of Array After K Negations",
        "Easy"
    ],
    "clumsy-factorial": [
        "Clumsy Factorial",
        "Medium"
    ],
    "minimum-domino-rotations-for-equal-row": [
        "Minimum Domino Rotations For Equal Row",
        "Medium"
    ],
    "construct-binary-search-tree-from-preorder-traversal": [
        "Construct Binary Search Tree from Preorder Traversal",
        "Medium"
    ],
    "complement-of-base-10-integer": [
        "Complement of Base 10 Integer",
        "Easy"
    ],
    "pairs-of-songs-with-total-durations-divisible-by-60": [
        "Pairs of Songs With Total Durations Divisible by 60",
        "Medium"
    ],
    "capacity-to-ship-packages-within-d-days": [
        "Capacity To Ship Packages Within D Days",
        "Medium"
    ],
    "numbers-with-repeated-digits": [
        "Numbers With Repeated Digits",
        "Hard"
    ],
    "partition-array-into-three-parts-with-equal-sum": [
        "Partition Array Into Three Parts With Equal Sum",
        "Easy"
    ],
    "best-sightseeing-pair": [
        "Best Sightseeing Pair",
        "Medium"
    ],
    "smallest-integer-divisible-by-k": [
        "Smallest Integer Divisible by K",
        "Medium"
    ],
    "binary-string-with-substrings-representing-1-to-n": [
        "Binary String With Substrings Representing 1 To N",
        "Medium"
    ],
    "convert-to-base-2": [
        "Convert to Base -2",
        "Medium"
    ],
    "binary-prefix-divisible-by-5": [
        "Binary Prefix Divisible By 5",
        "Easy"
    ],
    "next-greater-node-in-linked-list": [
        "Next Greater Node In Linked List",
        "Medium"
    ],
    "number-of-enclaves": [
        "Number of Enclaves",
        "Medium"
    ],
    "remove-outermost-parentheses": [
        "Remove Outermost Parentheses",
        "Easy"
    ],
    "sum-of-root-to-leaf-binary-numbers": [
        "Sum of Root To Leaf Binary Numbers",
        "Easy"
    ],
    "camelcase-matching": [
        "Camelcase Matching",
        "Medium"
    ],
    "video-stitching": [
        "Video Stitching",
        "Medium"
    ],
    "divisor-game": [
        "Divisor Game",
        "Easy"
    ],
    "maximum-difference-between-node-and-ancestor": [
        "Maximum Difference Between Node and Ancestor",
        "Medium"
    ],
    "longest-arithmetic-subsequence": [
        "Longest Arithmetic Subsequence",
        "Medium"
    ],
    "recover-a-tree-from-preorder-traversal": [
        "Recover a Tree From Preorder Traversal",
        "Hard"
    ],
    "two-city-scheduling": [
        "Two City Scheduling",
        "Medium"
    ],
    "matrix-cells-in-distance-order": [
        "Matrix Cells in Distance Order",
        "Easy"
    ],
    "maximum-sum-of-two-non-overlapping-subarrays": [
        "Maximum Sum of Two Non-Overlapping Subarrays",
        "Medium"
    ],
    "stream-of-characters": [
        "Stream of Characters",
        "Hard"
    ],
    "moving-stones-until-consecutive": [
        "Moving Stones Until Consecutive",
        "Medium"
    ],
    "coloring-a-border": [
        "Coloring A Border",
        "Medium"
    ],
    "uncrossed-lines": [
        "Uncrossed Lines",
        "Medium"
    ],
    "escape-a-large-maze": [
        "Escape a Large Maze",
        "Hard"
    ],
    "valid-boomerang": [
        "Valid Boomerang",
        "Easy"
    ],
    "binary-search-tree-to-greater-sum-tree": [
        "Binary Search Tree to Greater Sum Tree",
        "Medium"
    ],
    "minimum-score-triangulation-of-polygon": [
        "Minimum Score Triangulation of Polygon",
        "Medium"
    ],
    "moving-stones-until-consecutive-ii": [
        "Moving Stones Until Consecutive II",
        "Medium"
    ],
    "robot-bounded-in-circle": [
        "Robot Bounded In Circle",
        "Medium"
    ],
    "flower-planting-with-no-adjacent": [
        "Flower Planting With No Adjacent",
        "Medium"
    ],
    "partition-array-for-maximum-sum": [
        "Partition Array for Maximum Sum",
        "Medium"
    ],
    "longest-duplicate-substring": [
        "Longest Duplicate Substring",
        "Hard"
    ],
    "last-stone-weight": [
        "Last Stone Weight",
        "Easy"
    ],
    "remove-all-adjacent-duplicates-in-string": [
        "Remove All Adjacent Duplicates In String",
        "Easy"
    ],
    "longest-string-chain": [
        "Longest String Chain",
        "Medium"
    ],
    "last-stone-weight-ii": [
        "Last Stone Weight II",
        "Medium"
    ],
    "actors-and-directors-who-cooperated-at-least-three-times": [
        "Actors and Directors Who Cooperated At Least Three Times",
        "Easy"
    ],
    "height-checker": [
        "Height Checker",
        "Easy"
    ],
    "grumpy-bookstore-owner": [
        "Grumpy Bookstore Owner",
        "Medium"
    ],
    "previous-permutation-with-one-swap": [
        "Previous Permutation With One Swap",
        "Medium"
    ],
    "distant-barcodes": [
        "Distant Barcodes",
        "Medium"
    ],
    "greatest-common-divisor-of-strings": [
        "Greatest Common Divisor of Strings",
        "Easy"
    ],
    "flip-columns-for-maximum-number-of-equal-rows": [
        "Flip Columns For Maximum Number of Equal Rows",
        "Medium"
    ],
    "adding-two-negabinary-numbers": [
        "Adding Two Negabinary Numbers",
        "Medium"
    ],
    "number-of-submatrices-that-sum-to-target": [
        "Number of Submatrices That Sum to Target",
        "Hard"
    ],
    "occurrences-after-bigram": [
        "Occurrences After Bigram",
        "Easy"
    ],
    "letter-tile-possibilities": [
        "Letter Tile Possibilities",
        "Medium"
    ],
    "insufficient-nodes-in-root-to-leaf-paths": [
        "Insufficient Nodes in Root to Leaf Paths",
        "Medium"
    ],
    "smallest-subsequence-of-distinct-characters": [
        "Smallest Subsequence of Distinct Characters",
        "Medium"
    ],
    "sales-analysis-iii": [
        "Sales Analysis III",
        "Easy"
    ],
    "duplicate-zeros": [
        "Duplicate Zeros",
        "Easy"
    ],
    "largest-values-from-labels": [
        "Largest Values From Labels",
        "Medium"
    ],
    "shortest-path-in-binary-matrix": [
        "Shortest Path in Binary Matrix",
        "Medium"
    ],
    "shortest-common-supersequence": [
        "Shortest Common Supersequence ",
        "Hard"
    ],
    "statistics-from-a-large-sample": [
        "Statistics from a Large Sample",
        "Medium"
    ],
    "car-pooling": [
        "Car Pooling",
        "Medium"
    ],
    "find-in-mountain-array": [
        "Find in Mountain Array",
        "Hard"
    ],
    "brace-expansion-ii": [
        "Brace Expansion II",
        "Hard"
    ],
    "distribute-candies-to-people": [
        "Distribute Candies to People",
        "Easy"
    ],
    "path-in-zigzag-labelled-binary-tree": [
        "Path In Zigzag Labelled Binary Tree",
        "Medium"
    ],
    "filling-bookcase-shelves": [
        "Filling Bookcase Shelves",
        "Medium"
    ],
    "parsing-a-boolean-expression": [
        "Parsing A Boolean Expression",
        "Hard"
    ],
    "defanging-an-ip-address": [
        "Defanging an IP Address",
        "Easy"
    ],
    "corporate-flight-bookings": [
        "Corporate Flight Bookings",
        "Medium"
    ],
    "delete-nodes-and-return-forest": [
        "Delete Nodes And Return Forest",
        "Medium"
    ],
    "maximum-nesting-depth-of-two-valid-parentheses-strings": [
        "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "Medium"
    ],
    "print-in-order": [
        "Print in Order",
        "Easy"
    ],
    "print-foobar-alternately": [
        "Print FooBar Alternately",
        "Medium"
    ],
    "print-zero-even-odd": [
        "Print Zero Even Odd",
        "Medium"
    ],
    "building-h2o": [
        "Building H2O",
        "Medium"
    ],
    "relative-sort-array": [
        "Relative Sort Array",
        "Easy"
    ],
    "lowest-common-ancestor-of-deepest-leaves": [
        "Lowest Common Ancestor of Deepest Leaves",
        "Medium"
    ],
    "longest-well-performing-interval": [
        "Longest Well-Performing Interval",
        "Medium"
    ],
    "smallest-sufficient-team": [
        "Smallest Sufficient Team",
        "Hard"
    ],
    "number-of-equivalent-domino-pairs": [
        "Number of Equivalent Domino Pairs",
        "Easy"
    ],
    "shortest-path-with-alternating-colors": [
        "Shortest Path with Alternating Colors",
        "Medium"
    ],
    "minimum-cost-tree-from-leaf-values": [
        "Minimum Cost Tree From Leaf Values",
        "Medium"
    ],
    "maximum-of-absolute-value-expression": [
        "Maximum of Absolute Value Expression",
        "Medium"
    ],
    "n-th-tribonacci-number": [
        "N-th Tribonacci Number",
        "Easy"
    ],
    "alphabet-board-path": [
        "Alphabet Board Path",
        "Medium"
    ],
    "largest-1-bordered-square": [
        "Largest 1-Bordered Square",
        "Medium"
    ],
    "stone-game-ii": [
        "Stone Game II",
        "Medium"
    ],
    "user-activity-for-the-past-30-days-i": [
        "User Activity for the Past 30 Days I",
        "Easy"
    ],
    "longest-common-subsequence": [
        "Longest Common Subsequence",
        "Medium"
    ],
    "decrease-elements-to-make-array-zigzag": [
        "Decrease Elements To Make Array Zigzag",
        "Medium"
    ],
    "binary-tree-coloring-game": [
        "Binary Tree Coloring Game",
        "Medium"
    ],
    "snapshot-array": [
        "Snapshot Array",
        "Medium"
    ],
    "longest-chunked-palindrome-decomposition": [
        "Longest Chunked Palindrome Decomposition",
        "Hard"
    ],
    "article-views-i": [
        "Article Views I",
        "Easy"
    ],
    "day-of-the-year": [
        "Day of the Year",
        "Easy"
    ],
    "number-of-dice-rolls-with-target-sum": [
        "Number of Dice Rolls With Target Sum",
        "Medium"
    ],
    "swap-for-longest-repeated-character-substring": [
        "Swap For Longest Repeated Character Substring",
        "Medium"
    ],
    "online-majority-element-in-subarray": [
        "Online Majority Element In Subarray",
        "Hard"
    ],
    "market-analysis-i": [
        "Market Analysis I",
        "Medium"
    ],
    "find-words-that-can-be-formed-by-characters": [
        "Find Words That Can Be Formed by Characters",
        "Easy"
    ],
    "maximum-level-sum-of-a-binary-tree": [
        "Maximum Level Sum of a Binary Tree",
        "Medium"
    ],
    "as-far-from-land-as-possible": [
        "As Far from Land as Possible",
        "Medium"
    ],
    "last-substring-in-lexicographical-order": [
        "Last Substring in Lexicographical Order",
        "Hard"
    ],
    "invalid-transactions": [
        "Invalid Transactions",
        "Medium"
    ],
    "compare-strings-by-frequency-of-the-smallest-character": [
        "Compare Strings by Frequency of the Smallest Character",
        "Medium"
    ],
    "remove-zero-sum-consecutive-nodes-from-linked-list": [
        "Remove Zero Sum Consecutive Nodes from Linked List",
        "Medium"
    ],
    "dinner-plate-stacks": [
        "Dinner Plate Stacks",
        "Hard"
    ],
    "prime-arrangements": [
        "Prime Arrangements",
        "Easy"
    ],
    "can-make-palindrome-from-substring": [
        "Can Make Palindrome from Substring",
        "Medium"
    ],
    "number-of-valid-words-for-each-puzzle": [
        "Number of Valid Words for Each Puzzle",
        "Hard"
    ],
    "reformat-department-table": [
        "Reformat Department Table",
        "Easy"
    ],
    "distance-between-bus-stops": [
        "Distance Between Bus Stops",
        "Easy"
    ],
    "day-of-the-week": [
        "Day of the Week",
        "Easy"
    ],
    "maximum-subarray-sum-with-one-deletion": [
        "Maximum Subarray Sum with One Deletion",
        "Medium"
    ],
    "make-array-strictly-increasing": [
        "Make Array Strictly Increasing",
        "Hard"
    ],
    "maximum-number-of-balloons": [
        "Maximum Number of Balloons",
        "Easy"
    ],
    "reverse-substrings-between-each-pair-of-parentheses": [
        "Reverse Substrings Between Each Pair of Parentheses",
        "Medium"
    ],
    "k-concatenation-maximum-sum": [
        "K-Concatenation Maximum Sum",
        "Medium"
    ],
    "critical-connections-in-a-network": [
        "Critical Connections in a Network",
        "Hard"
    ],
    "fizz-buzz-multithreaded": [
        "Fizz Buzz Multithreaded",
        "Medium"
    ],
    "minimum-absolute-difference": [
        "Minimum Absolute Difference",
        "Easy"
    ],
    "ugly-number-iii": [
        "Ugly Number III",
        "Medium"
    ],
    "smallest-string-with-swaps": [
        "Smallest String With Swaps",
        "Medium"
    ],
    "sort-items-by-groups-respecting-dependencies": [
        "Sort Items by Groups Respecting Dependencies",
        "Hard"
    ],
    "design-skiplist": [
        "Design Skiplist",
        "Hard"
    ],
    "unique-number-of-occurrences": [
        "Unique Number of Occurrences",
        "Easy"
    ],
    "get-equal-substrings-within-budget": [
        "Get Equal Substrings Within Budget",
        "Medium"
    ],
    "remove-all-adjacent-duplicates-in-string-ii": [
        "Remove All Adjacent Duplicates in String II",
        "Medium"
    ],
    "minimum-moves-to-reach-target-with-rotations": [
        "Minimum Moves to Reach Target with Rotations",
        "Hard"
    ],
    "minimum-cost-to-move-chips-to-the-same-position": [
        "Minimum Cost to Move Chips to The Same Position",
        "Easy"
    ],
    "longest-arithmetic-subsequence-of-given-difference": [
        "Longest Arithmetic Subsequence of Given Difference",
        "Medium"
    ],
    "path-with-maximum-gold": [
        "Path with Maximum Gold",
        "Medium"
    ],
    "count-vowels-permutation": [
        "Count Vowels Permutation",
        "Hard"
    ],
    "split-a-string-in-balanced-strings": [
        "Split a String in Balanced Strings",
        "Easy"
    ],
    "queens-that-can-attack-the-king": [
        "Queens That Can Attack the King",
        "Medium"
    ],
    "dice-roll-simulation": [
        "Dice Roll Simulation",
        "Hard"
    ],
    "maximum-equal-frequency": [
        "Maximum Equal Frequency",
        "Hard"
    ],
    "the-dining-philosophers": [
        "The Dining Philosophers",
        "Medium"
    ],
    "airplane-seat-assignment-probability": [
        "Airplane Seat Assignment Probability",
        "Medium"
    ],
    "check-if-it-is-a-straight-line": [
        "Check If It Is a Straight Line",
        "Easy"
    ],
    "remove-sub-folders-from-the-filesystem": [
        "Remove Sub-Folders from the Filesystem",
        "Medium"
    ],
    "replace-the-substring-for-balanced-string": [
        "Replace the Substring for Balanced String",
        "Medium"
    ],
    "maximum-profit-in-job-scheduling": [
        "Maximum Profit in Job Scheduling",
        "Hard"
    ],
    "find-positive-integer-solution-for-a-given-equation": [
        "Find Positive Integer Solution for a Given Equation",
        "Medium"
    ],
    "circular-permutation-in-binary-representation": [
        "Circular Permutation in Binary Representation",
        "Medium"
    ],
    "maximum-length-of-a-concatenated-string-with-unique-characters": [
        "Maximum Length of a Concatenated String with Unique Characters",
        "Medium"
    ],
    "tiling-a-rectangle-with-the-fewest-squares": [
        "Tiling a Rectangle with the Fewest Squares",
        "Hard"
    ],
    "minimum-swaps-to-make-strings-equal": [
        "Minimum Swaps to Make Strings Equal",
        "Medium"
    ],
    "count-number-of-nice-subarrays": [
        "Count Number of Nice Subarrays",
        "Medium"
    ],
    "minimum-remove-to-make-valid-parentheses": [
        "Minimum Remove to Make Valid Parentheses",
        "Medium"
    ],
    "check-if-it-is-a-good-array": [
        "Check If It Is a Good Array",
        "Hard"
    ],
    "cells-with-odd-values-in-a-matrix": [
        "Cells with Odd Values in a Matrix",
        "Easy"
    ],
    "reconstruct-a-2-row-binary-matrix": [
        "Reconstruct a 2-Row Binary Matrix",
        "Medium"
    ],
    "number-of-closed-islands": [
        "Number of Closed Islands",
        "Medium"
    ],
    "maximum-score-words-formed-by-letters": [
        "Maximum Score Words Formed by Letters",
        "Hard"
    ],
    "shift-2d-grid": [
        "Shift 2D Grid",
        "Easy"
    ],
    "find-elements-in-a-contaminated-binary-tree": [
        "Find Elements in a Contaminated Binary Tree",
        "Medium"
    ],
    "greatest-sum-divisible-by-three": [
        "Greatest Sum Divisible by Three",
        "Medium"
    ],
    "minimum-moves-to-move-a-box-to-their-target-location": [
        "Minimum Moves to Move a Box to Their Target Location",
        "Hard"
    ],
    "minimum-time-visiting-all-points": [
        "Minimum Time Visiting All Points",
        "Easy"
    ],
    "count-servers-that-communicate": [
        "Count Servers that Communicate",
        "Medium"
    ],
    "search-suggestions-system": [
        "Search Suggestions System",
        "Medium"
    ],
    "number-of-ways-to-stay-in-the-same-place-after-some-steps": [
        "Number of Ways to Stay in the Same Place After Some Steps",
        "Hard"
    ],
    "find-winner-on-a-tic-tac-toe-game": [
        "Find Winner on a Tic Tac Toe Game",
        "Easy"
    ],
    "number-of-burgers-with-no-waste-of-ingredients": [
        "Number of Burgers with No Waste of Ingredients",
        "Medium"
    ],
    "count-square-submatrices-with-all-ones": [
        "Count Square Submatrices with All Ones",
        "Medium"
    ],
    "palindrome-partitioning-iii": [
        "Palindrome Partitioning III",
        "Hard"
    ],
    "subtract-the-product-and-sum-of-digits-of-an-integer": [
        "Subtract the Product and Sum of Digits of an Integer",
        "Easy"
    ],
    "group-the-people-given-the-group-size-they-belong-to": [
        "Group the People Given the Group Size They Belong To",
        "Medium"
    ],
    "find-the-smallest-divisor-given-a-threshold": [
        "Find the Smallest Divisor Given a Threshold",
        "Medium"
    ],
    "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix": [
        "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "Hard"
    ],
    "iterator-for-combination": [
        "Iterator for Combination",
        "Medium"
    ],
    "element-appearing-more-than-25-in-sorted-array": [
        "Element Appearing More Than 25% In Sorted Array",
        "Easy"
    ],
    "remove-covered-intervals": [
        "Remove Covered Intervals",
        "Medium"
    ],
    "minimum-falling-path-sum-ii": [
        "Minimum Falling Path Sum II",
        "Hard"
    ],
    "convert-binary-number-in-a-linked-list-to-integer": [
        "Convert Binary Number in a Linked List to Integer",
        "Easy"
    ],
    "sequential-digits": [
        "Sequential Digits",
        "Medium"
    ],
    "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold": [
        "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "Medium"
    ],
    "shortest-path-in-a-grid-with-obstacles-elimination": [
        "Shortest Path in a Grid with Obstacles Elimination",
        "Hard"
    ],
    "find-numbers-with-even-number-of-digits": [
        "Find Numbers with Even Number of Digits",
        "Easy"
    ],
    "divide-array-in-sets-of-k-consecutive-numbers": [
        "Divide Array in Sets of K Consecutive Numbers",
        "Medium"
    ],
    "maximum-number-of-occurrences-of-a-substring": [
        "Maximum Number of Occurrences of a Substring",
        "Medium"
    ],
    "maximum-candies-you-can-get-from-boxes": [
        "Maximum Candies You Can Get from Boxes",
        "Hard"
    ],
    "replace-elements-with-greatest-element-on-right-side": [
        "Replace Elements with Greatest Element on Right Side",
        "Easy"
    ],
    "sum-of-mutated-array-closest-to-target": [
        "Sum of Mutated Array Closest to Target",
        "Medium"
    ],
    "number-of-paths-with-max-score": [
        "Number of Paths with Max Score",
        "Hard"
    ],
    "deepest-leaves-sum": [
        "Deepest Leaves Sum",
        "Medium"
    ],
    "find-n-unique-integers-sum-up-to-zero": [
        "Find N Unique Integers Sum up to Zero",
        "Easy"
    ],
    "all-elements-in-two-binary-search-trees": [
        "All Elements in Two Binary Search Trees",
        "Medium"
    ],
    "jump-game-iii": [
        "Jump Game III",
        "Medium"
    ],
    "verbal-arithmetic-puzzle": [
        "Verbal Arithmetic Puzzle",
        "Hard"
    ],
    "decrypt-string-from-alphabet-to-integer-mapping": [
        "Decrypt String from Alphabet to Integer Mapping",
        "Easy"
    ],
    "xor-queries-of-a-subarray": [
        "XOR Queries of a Subarray",
        "Medium"
    ],
    "get-watched-videos-by-your-friends": [
        "Get Watched Videos by Your Friends",
        "Medium"
    ],
    "minimum-insertion-steps-to-make-a-string-palindrome": [
        "Minimum Insertion Steps to Make a String Palindrome",
        "Hard"
    ],
    "decompress-run-length-encoded-list": [
        "Decompress Run-Length Encoded List",
        "Easy"
    ],
    "matrix-block-sum": [
        "Matrix Block Sum",
        "Medium"
    ],
    "sum-of-nodes-with-even-valued-grandparent": [
        "Sum of Nodes with Even-Valued Grandparent",
        "Medium"
    ],
    "distinct-echo-substrings": [
        "Distinct Echo Substrings",
        "Hard"
    ],
    "convert-integer-to-the-sum-of-two-no-zero-integers": [
        "Convert Integer to the Sum of Two No-Zero Integers",
        "Easy"
    ],
    "minimum-flips-to-make-a-or-b-equal-to-c": [
        "Minimum Flips to Make a OR b Equal to c",
        "Medium"
    ],
    "number-of-operations-to-make-network-connected": [
        "Number of Operations to Make Network Connected",
        "Medium"
    ],
    "minimum-distance-to-type-a-word-using-two-fingers": [
        "Minimum Distance to Type a Word Using Two Fingers",
        "Hard"
    ],
    "maximum-69-number": [
        "Maximum 69 Number",
        "Easy"
    ],
    "print-words-vertically": [
        "Print Words Vertically",
        "Medium"
    ],
    "delete-leaves-with-a-given-value": [
        "Delete Leaves With a Given Value",
        "Medium"
    ],
    "minimum-number-of-taps-to-open-to-water-a-garden": [
        "Minimum Number of Taps to Open to Water a Garden",
        "Hard"
    ],
    "break-a-palindrome": [
        "Break a Palindrome",
        "Medium"
    ],
    "sort-the-matrix-diagonally": [
        "Sort the Matrix Diagonally",
        "Medium"
    ],
    "reverse-subarray-to-maximize-array-value": [
        "Reverse Subarray To Maximize Array Value",
        "Hard"
    ],
    "rank-transform-of-an-array": [
        "Rank Transform of an Array",
        "Easy"
    ],
    "remove-palindromic-subsequences": [
        "Remove Palindromic Subsequences",
        "Easy"
    ],
    "filter-restaurants-by-vegan-friendly-price-and-distance": [
        "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "Medium"
    ],
    "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance": [
        "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "Medium"
    ],
    "minimum-difficulty-of-a-job-schedule": [
        "Minimum Difficulty of a Job Schedule",
        "Hard"
    ],
    "the-k-weakest-rows-in-a-matrix": [
        "The K Weakest Rows in a Matrix",
        "Easy"
    ],
    "reduce-array-size-to-the-half": [
        "Reduce Array Size to The Half",
        "Medium"
    ],
    "maximum-product-of-splitted-binary-tree": [
        "Maximum Product of Splitted Binary Tree",
        "Medium"
    ],
    "jump-game-v": [
        "Jump Game V",
        "Hard"
    ],
    "number-of-steps-to-reduce-a-number-to-zero": [
        "Number of Steps to Reduce a Number to Zero",
        "Easy"
    ],
    "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold": [
        "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "Medium"
    ],
    "angle-between-hands-of-a-clock": [
        "Angle Between Hands of a Clock",
        "Medium"
    ],
    "jump-game-iv": [
        "Jump Game IV",
        "Hard"
    ],
    "check-if-n-and-its-double-exist": [
        "Check If N and Its Double Exist",
        "Easy"
    ],
    "minimum-number-of-steps-to-make-two-strings-anagram": [
        "Minimum Number of Steps to Make Two Strings Anagram",
        "Medium"
    ],
    "tweet-counts-per-frequency": [
        "Tweet Counts Per Frequency",
        "Medium"
    ],
    "maximum-students-taking-exam": [
        "Maximum Students Taking Exam",
        "Hard"
    ],
    "count-negative-numbers-in-a-sorted-matrix": [
        "Count Negative Numbers in a Sorted Matrix",
        "Easy"
    ],
    "product-of-the-last-k-numbers": [
        "Product of the Last K Numbers",
        "Medium"
    ],
    "maximum-number-of-events-that-can-be-attended": [
        "Maximum Number of Events That Can Be Attended",
        "Medium"
    ],
    "construct-target-array-with-multiple-sums": [
        "Construct Target Array With Multiple Sums",
        "Hard"
    ],
    "sort-integers-by-the-number-of-1-bits": [
        "Sort Integers by The Number of 1 Bits",
        "Easy"
    ],
    "apply-discount-every-n-orders": [
        "Apply Discount Every n Orders",
        "Medium"
    ],
    "number-of-substrings-containing-all-three-characters": [
        "Number of Substrings Containing All Three Characters",
        "Medium"
    ],
    "count-all-valid-pickup-and-delivery-options": [
        "Count All Valid Pickup and Delivery Options",
        "Hard"
    ],
    "number-of-days-between-two-dates": [
        "Number of Days Between Two Dates",
        "Easy"
    ],
    "validate-binary-tree-nodes": [
        "Validate Binary Tree Nodes",
        "Medium"
    ],
    "closest-divisors": [
        "Closest Divisors",
        "Medium"
    ],
    "largest-multiple-of-three": [
        "Largest Multiple of Three",
        "Hard"
    ],
    "how-many-numbers-are-smaller-than-the-current-number": [
        "How Many Numbers Are Smaller Than the Current Number",
        "Easy"
    ],
    "rank-teams-by-votes": [
        "Rank Teams by Votes",
        "Medium"
    ],
    "linked-list-in-binary-tree": [
        "Linked List in Binary Tree",
        "Medium"
    ],
    "minimum-cost-to-make-at-least-one-valid-path-in-a-grid": [
        "Minimum Cost to Make at Least One Valid Path in a Grid",
        "Hard"
    ],
    "increasing-decreasing-string": [
        "Increasing Decreasing String",
        "Easy"
    ],
    "find-the-longest-substring-containing-vowels-in-even-counts": [
        "Find the Longest Substring Containing Vowels in Even Counts",
        "Medium"
    ],
    "longest-zigzag-path-in-a-binary-tree": [
        "Longest ZigZag Path in a Binary Tree",
        "Medium"
    ],
    "maximum-sum-bst-in-binary-tree": [
        "Maximum Sum BST in Binary Tree",
        "Hard"
    ],
    "generate-a-string-with-characters-that-have-odd-counts": [
        "Generate a String With Characters That Have Odd Counts",
        "Easy"
    ],
    "number-of-times-binary-string-is-prefix-aligned": [
        "Number of Times Binary String Is Prefix-Aligned",
        "Medium"
    ],
    "time-needed-to-inform-all-employees": [
        "Time Needed to Inform All Employees",
        "Medium"
    ],
    "frog-position-after-t-seconds": [
        "Frog Position After T Seconds",
        "Hard"
    ],
    "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree": [
        "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "Easy"
    ],
    "lucky-numbers-in-a-matrix": [
        "Lucky Numbers in a Matrix",
        "Easy"
    ],
    "design-a-stack-with-increment-operation": [
        "Design a Stack With Increment Operation",
        "Medium"
    ],
    "balance-a-binary-search-tree": [
        "Balance a Binary Search Tree",
        "Medium"
    ],
    "maximum-performance-of-a-team": [
        "Maximum Performance of a Team",
        "Hard"
    ],
    "find-the-distance-value-between-two-arrays": [
        "Find the Distance Value Between Two Arrays",
        "Easy"
    ],
    "cinema-seat-allocation": [
        "Cinema Seat Allocation",
        "Medium"
    ],
    "sort-integers-by-the-power-value": [
        "Sort Integers by The Power Value",
        "Medium"
    ],
    "pizza-with-3n-slices": [
        "Pizza With 3n Slices",
        "Hard"
    ],
    "create-target-array-in-the-given-order": [
        "Create Target Array in the Given Order",
        "Easy"
    ],
    "four-divisors": [
        "Four Divisors",
        "Medium"
    ],
    "check-if-there-is-a-valid-path-in-a-grid": [
        "Check if There is a Valid Path in a Grid",
        "Medium"
    ],
    "longest-happy-prefix": [
        "Longest Happy Prefix",
        "Hard"
    ],
    "capital-gainloss": [
        "Capital Gain/Loss",
        "Medium"
    ],
    "find-lucky-integer-in-an-array": [
        "Find Lucky Integer in an Array",
        "Easy"
    ],
    "count-number-of-teams": [
        "Count Number of Teams",
        "Medium"
    ],
    "design-underground-system": [
        "Design Underground System",
        "Medium"
    ],
    "find-all-good-strings": [
        "Find All Good Strings",
        "Hard"
    ],
    "count-largest-group": [
        "Count Largest Group",
        "Easy"
    ],
    "construct-k-palindrome-strings": [
        "Construct K Palindrome Strings",
        "Medium"
    ],
    "circle-and-rectangle-overlapping": [
        "Circle and Rectangle Overlapping",
        "Medium"
    ],
    "reducing-dishes": [
        "Reducing Dishes",
        "Hard"
    ],
    "minimum-subsequence-in-non-increasing-order": [
        "Minimum Subsequence in Non-Increasing Order",
        "Easy"
    ],
    "number-of-steps-to-reduce-a-number-in-binary-representation-to-one": [
        "Number of Steps to Reduce a Number in Binary Representation to One",
        "Medium"
    ],
    "longest-happy-string": [
        "Longest Happy String",
        "Medium"
    ],
    "stone-game-iii": [
        "Stone Game III",
        "Hard"
    ],
    "top-travellers": [
        "Top Travellers",
        "Easy"
    ],
    "string-matching-in-an-array": [
        "String Matching in an Array",
        "Easy"
    ],
    "queries-on-a-permutation-with-key": [
        "Queries on a Permutation With Key",
        "Medium"
    ],
    "html-entity-parser": [
        "HTML Entity Parser",
        "Medium"
    ],
    "number-of-ways-to-paint-n-3-grid": [
        "Number of Ways to Paint N \u00d7 3 Grid",
        "Hard"
    ],
    "minimum-value-to-get-positive-step-by-step-sum": [
        "Minimum Value to Get Positive Step by Step Sum",
        "Easy"
    ],
    "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k": [
        "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "Medium"
    ],
    "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n": [
        "The k-th Lexicographical String of All Happy Strings of Length n",
        "Medium"
    ],
    "restore-the-array": [
        "Restore The Array",
        "Hard"
    ],
    "reformat-the-string": [
        "Reformat The String",
        "Easy"
    ],
    "display-table-of-food-orders-in-a-restaurant": [
        "Display Table of Food Orders in a Restaurant",
        "Medium"
    ],
    "minimum-number-of-frogs-croaking": [
        "Minimum Number of Frogs Croaking",
        "Medium"
    ],
    "build-array-where-you-can-find-the-maximum-exactly-k-comparisons": [
        "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "Hard"
    ],
    "maximum-score-after-splitting-a-string": [
        "Maximum Score After Splitting a String",
        "Easy"
    ],
    "maximum-points-you-can-obtain-from-cards": [
        "Maximum Points You Can Obtain from Cards",
        "Medium"
    ],
    "diagonal-traverse-ii": [
        "Diagonal Traverse II",
        "Medium"
    ],
    "constrained-subsequence-sum": [
        "Constrained Subsequence Sum",
        "Hard"
    ],
    "kids-with-the-greatest-number-of-candies": [
        "Kids With the Greatest Number of Candies",
        "Easy"
    ],
    "max-difference-you-can-get-from-changing-an-integer": [
        "Max Difference You Can Get From Changing an Integer",
        "Medium"
    ],
    "check-if-a-string-can-break-another-string": [
        "Check If a String Can Break Another String",
        "Medium"
    ],
    "number-of-ways-to-wear-different-hats-to-each-other": [
        "Number of Ways to Wear Different Hats to Each Other",
        "Hard"
    ],
    "destination-city": [
        "Destination City",
        "Easy"
    ],
    "check-if-all-1s-are-at-least-length-k-places-away": [
        "Check If All 1's Are at Least Length K Places Away",
        "Easy"
    ],
    "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit": [
        "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "Medium"
    ],
    "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows": [
        "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "Hard"
    ],
    "build-an-array-with-stack-operations": [
        "Build an Array With Stack Operations",
        "Medium"
    ],
    "count-triplets-that-can-form-two-arrays-of-equal-xor": [
        "Count Triplets That Can Form Two Arrays of Equal XOR",
        "Medium"
    ],
    "minimum-time-to-collect-all-apples-in-a-tree": [
        "Minimum Time to Collect All Apples in a Tree",
        "Medium"
    ],
    "number-of-ways-of-cutting-a-pizza": [
        "Number of Ways of Cutting a Pizza",
        "Hard"
    ],
    "consecutive-characters": [
        "Consecutive Characters",
        "Easy"
    ],
    "simplified-fractions": [
        "Simplified Fractions",
        "Medium"
    ],
    "count-good-nodes-in-binary-tree": [
        "Count Good Nodes in Binary Tree",
        "Medium"
    ],
    "form-largest-integer-with-digits-that-add-up-to-target": [
        "Form Largest Integer With Digits That Add up to Target",
        "Hard"
    ],
    "number-of-students-doing-homework-at-a-given-time": [
        "Number of Students Doing Homework at a Given Time",
        "Easy"
    ],
    "rearrange-words-in-a-sentence": [
        "Rearrange Words in a Sentence",
        "Medium"
    ],
    "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list": [
        "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "Medium"
    ],
    "maximum-number-of-darts-inside-of-a-circular-dartboard": [
        "Maximum Number of Darts Inside of a Circular Dartboard",
        "Hard"
    ],
    "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence": [
        "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "Easy"
    ],
    "maximum-number-of-vowels-in-a-substring-of-given-length": [
        "Maximum Number of Vowels in a Substring of Given Length",
        "Medium"
    ],
    "pseudo-palindromic-paths-in-a-binary-tree": [
        "Pseudo-Palindromic Paths in a Binary Tree",
        "Medium"
    ],
    "max-dot-product-of-two-subsequences": [
        "Max Dot Product of Two Subsequences",
        "Hard"
    ],
    "make-two-arrays-equal-by-reversing-subarrays": [
        "Make Two Arrays Equal by Reversing Subarrays",
        "Easy"
    ],
    "check-if-a-string-contains-all-binary-codes-of-size-k": [
        "Check If a String Contains All Binary Codes of Size K",
        "Medium"
    ],
    "course-schedule-iv": [
        "Course Schedule IV",
        "Medium"
    ],
    "cherry-pickup-ii": [
        "Cherry Pickup II",
        "Hard"
    ],
    "maximum-product-of-two-elements-in-an-array": [
        "Maximum Product of Two Elements in an Array",
        "Easy"
    ],
    "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts": [
        "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "Medium"
    ],
    "reorder-routes-to-make-all-paths-lead-to-the-city-zero": [
        "Reorder Routes to Make All Paths Lead to the City Zero",
        "Medium"
    ],
    "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls": [
        "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "Hard"
    ],
    "shuffle-the-array": [
        "Shuffle the Array",
        "Easy"
    ],
    "the-k-strongest-values-in-an-array": [
        "The k Strongest Values in an Array",
        "Medium"
    ],
    "design-browser-history": [
        "Design Browser History",
        "Medium"
    ],
    "paint-house-iii": [
        "Paint House III",
        "Hard"
    ],
    "final-prices-with-a-special-discount-in-a-shop": [
        "Final Prices With a Special Discount in a Shop",
        "Easy"
    ],
    "subrectangle-queries": [
        "Subrectangle Queries",
        "Medium"
    ],
    "find-two-non-overlapping-sub-arrays-each-with-target-sum": [
        "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "Medium"
    ],
    "allocate-mailboxes": [
        "Allocate Mailboxes",
        "Hard"
    ],
    "running-sum-of-1d-array": [
        "Running Sum of 1d Array",
        "Easy"
    ],
    "least-number-of-unique-integers-after-k-removals": [
        "Least Number of Unique Integers after K Removals",
        "Medium"
    ],
    "minimum-number-of-days-to-make-m-bouquets": [
        "Minimum Number of Days to Make m Bouquets",
        "Medium"
    ],
    "kth-ancestor-of-a-tree-node": [
        "Kth Ancestor of a Tree Node",
        "Hard"
    ],
    "group-sold-products-by-the-date": [
        "Group Sold Products By The Date",
        "Easy"
    ],
    "xor-operation-in-an-array": [
        "XOR Operation in an Array",
        "Easy"
    ],
    "making-file-names-unique": [
        "Making File Names Unique",
        "Medium"
    ],
    "avoid-flood-in-the-city": [
        "Avoid Flood in The City",
        "Medium"
    ],
    "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree": [
        "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "Hard"
    ],
    "average-salary-excluding-the-minimum-and-maximum-salary": [
        "Average Salary Excluding the Minimum and Maximum Salary",
        "Easy"
    ],
    "the-kth-factor-of-n": [
        "The kth Factor of n",
        "Medium"
    ],
    "longest-subarray-of-1s-after-deleting-one-element": [
        "Longest Subarray of 1's After Deleting One Element",
        "Medium"
    ],
    "parallel-courses-ii": [
        "Parallel Courses II",
        "Hard"
    ],
    "path-crossing": [
        "Path Crossing",
        "Easy"
    ],
    "check-if-array-pairs-are-divisible-by-k": [
        "Check If Array Pairs Are Divisible by k",
        "Medium"
    ],
    "number-of-subsequences-that-satisfy-the-given-sum-condition": [
        "Number of Subsequences That Satisfy the Given Sum Condition",
        "Medium"
    ],
    "max-value-of-equation": [
        "Max Value of Equation",
        "Hard"
    ],
    "can-make-arithmetic-progression-from-sequence": [
        "Can Make Arithmetic Progression From Sequence",
        "Easy"
    ],
    "last-moment-before-all-ants-fall-out-of-a-plank": [
        "Last Moment Before All Ants Fall Out of a Plank",
        "Medium"
    ],
    "count-submatrices-with-all-ones": [
        "Count Submatrices With All Ones",
        "Medium"
    ],
    "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits": [
        "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "Hard"
    ],
    "reformat-date": [
        "Reformat Date",
        "Easy"
    ],
    "range-sum-of-sorted-subarray-sums": [
        "Range Sum of Sorted Subarray Sums",
        "Medium"
    ],
    "minimum-difference-between-largest-and-smallest-value-in-three-moves": [
        "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "Medium"
    ],
    "stone-game-iv": [
        "Stone Game IV",
        "Hard"
    ],
    "number-of-good-pairs": [
        "Number of Good Pairs",
        "Easy"
    ],
    "number-of-substrings-with-only-1s": [
        "Number of Substrings With Only 1s",
        "Medium"
    ],
    "path-with-maximum-probability": [
        "Path with Maximum Probability",
        "Medium"
    ],
    "best-position-for-a-service-centre": [
        "Best Position for a Service Centre",
        "Hard"
    ],
    "water-bottles": [
        "Water Bottles",
        "Easy"
    ],
    "number-of-nodes-in-the-sub-tree-with-the-same-label": [
        "Number of Nodes in the Sub-Tree With the Same Label",
        "Medium"
    ],
    "maximum-number-of-non-overlapping-substrings": [
        "Maximum Number of Non-Overlapping Substrings",
        "Hard"
    ],
    "find-a-value-of-a-mysterious-function-closest-to-target": [
        "Find a Value of a Mysterious Function Closest to Target",
        "Hard"
    ],
    "count-odd-numbers-in-an-interval-range": [
        "Count Odd Numbers in an Interval Range",
        "Easy"
    ],
    "number-of-sub-arrays-with-odd-sum": [
        "Number of Sub-arrays With Odd Sum",
        "Medium"
    ],
    "number-of-good-ways-to-split-a-string": [
        "Number of Good Ways to Split a String",
        "Medium"
    ],
    "minimum-number-of-increments-on-subarrays-to-form-a-target-array": [
        "Minimum Number of Increments on Subarrays to Form a Target Array",
        "Hard"
    ],
    "patients-with-a-condition": [
        "Patients With a Condition",
        "Easy"
    ],
    "shuffle-string": [
        "Shuffle String",
        "Easy"
    ],
    "minimum-suffix-flips": [
        "Minimum Suffix Flips",
        "Medium"
    ],
    "number-of-good-leaf-nodes-pairs": [
        "Number of Good Leaf Nodes Pairs",
        "Medium"
    ],
    "string-compression-ii": [
        "String Compression II",
        "Hard"
    ],
    "count-good-triplets": [
        "Count Good Triplets",
        "Easy"
    ],
    "find-the-winner-of-an-array-game": [
        "Find the Winner of an Array Game",
        "Medium"
    ],
    "minimum-swaps-to-arrange-a-binary-grid": [
        "Minimum Swaps to Arrange a Binary Grid",
        "Medium"
    ],
    "get-the-maximum-score": [
        "Get the Maximum Score",
        "Hard"
    ],
    "kth-missing-positive-number": [
        "Kth Missing Positive Number",
        "Easy"
    ],
    "can-convert-string-in-k-moves": [
        "Can Convert String in K Moves",
        "Medium"
    ],
    "minimum-insertions-to-balance-a-parentheses-string": [
        "Minimum Insertions to Balance a Parentheses String",
        "Medium"
    ],
    "find-longest-awesome-substring": [
        "Find Longest Awesome Substring",
        "Hard"
    ],
    "make-the-string-great": [
        "Make The String Great",
        "Easy"
    ],
    "find-kth-bit-in-nth-binary-string": [
        "Find Kth Bit in Nth Binary String",
        "Medium"
    ],
    "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target": [
        "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "Medium"
    ],
    "minimum-cost-to-cut-a-stick": [
        "Minimum Cost to Cut a Stick",
        "Hard"
    ],
    "three-consecutive-odds": [
        "Three Consecutive Odds",
        "Easy"
    ],
    "minimum-operations-to-make-array-equal": [
        "Minimum Operations to Make Array Equal",
        "Medium"
    ],
    "magnetic-force-between-two-balls": [
        "Magnetic Force Between Two Balls",
        "Medium"
    ],
    "minimum-number-of-days-to-eat-n-oranges": [
        "Minimum Number of Days to Eat N Oranges",
        "Hard"
    ],
    "thousand-separator": [
        "Thousand Separator",
        "Easy"
    ],
    "minimum-number-of-vertices-to-reach-all-nodes": [
        "Minimum Number of Vertices to Reach All Nodes",
        "Medium"
    ],
    "minimum-numbers-of-function-calls-to-make-target-array": [
        "Minimum Numbers of Function Calls to Make Target Array",
        "Medium"
    ],
    "detect-cycles-in-2d-grid": [
        "Detect Cycles in 2D Grid",
        "Medium"
    ],
    "most-visited-sector-in-a-circular-track": [
        "Most Visited Sector in  a Circular Track",
        "Easy"
    ],
    "maximum-number-of-coins-you-can-get": [
        "Maximum Number of Coins You Can Get",
        "Medium"
    ],
    "find-latest-group-of-size-m": [
        "Find Latest Group of Size M",
        "Medium"
    ],
    "stone-game-v": [
        "Stone Game V",
        "Hard"
    ],
    "detect-pattern-of-length-m-repeated-k-or-more-times": [
        "Detect Pattern of Length M Repeated K or More Times",
        "Easy"
    ],
    "maximum-length-of-subarray-with-positive-product": [
        "Maximum Length of Subarray With Positive Product",
        "Medium"
    ],
    "minimum-number-of-days-to-disconnect-island": [
        "Minimum Number of Days to Disconnect Island",
        "Hard"
    ],
    "number-of-ways-to-reorder-array-to-get-same-bst": [
        "Number of Ways to Reorder Array to Get Same BST",
        "Hard"
    ],
    "matrix-diagonal-sum": [
        "Matrix Diagonal Sum",
        "Easy"
    ],
    "number-of-ways-to-split-a-string": [
        "Number of Ways to Split a String",
        "Medium"
    ],
    "shortest-subarray-to-be-removed-to-make-array-sorted": [
        "Shortest Subarray to be Removed to Make Array Sorted",
        "Medium"
    ],
    "count-all-possible-routes": [
        "Count All Possible Routes",
        "Hard"
    ],
    "replace-all-s-to-avoid-consecutive-repeating-characters": [
        "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "Easy"
    ],
    "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers": [
        "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "Medium"
    ],
    "minimum-time-to-make-rope-colorful": [
        "Minimum Time to Make Rope Colorful",
        "Medium"
    ],
    "remove-max-number-of-edges-to-keep-graph-fully-traversable": [
        "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "Hard"
    ],
    "customer-who-visited-but-did-not-make-any-transactions": [
        "Customer Who Visited but Did Not Make Any Transactions",
        "Easy"
    ],
    "special-positions-in-a-binary-matrix": [
        "Special Positions in a Binary Matrix",
        "Easy"
    ],
    "count-unhappy-friends": [
        "Count Unhappy Friends",
        "Medium"
    ],
    "min-cost-to-connect-all-points": [
        "Min Cost to Connect All Points",
        "Medium"
    ],
    "check-if-string-is-transformable-with-substring-sort-operations": [
        "Check If String Is Transformable With Substring Sort Operations",
        "Hard"
    ],
    "bank-account-summary-ii": [
        "Bank Account Summary II",
        "Easy"
    ],
    "sum-of-all-odd-length-subarrays": [
        "Sum of All Odd Length Subarrays",
        "Easy"
    ],
    "maximum-sum-obtained-of-any-permutation": [
        "Maximum Sum Obtained of Any Permutation",
        "Medium"
    ],
    "make-sum-divisible-by-p": [
        "Make Sum Divisible by P",
        "Medium"
    ],
    "strange-printer-ii": [
        "Strange Printer II",
        "Hard"
    ],
    "rearrange-spaces-between-words": [
        "Rearrange Spaces Between Words",
        "Easy"
    ],
    "split-a-string-into-the-max-number-of-unique-substrings": [
        "Split a String Into the Max Number of Unique Substrings",
        "Medium"
    ],
    "maximum-non-negative-product-in-a-matrix": [
        "Maximum Non Negative Product in a Matrix",
        "Medium"
    ],
    "minimum-cost-to-connect-two-groups-of-points": [
        "Minimum Cost to Connect Two Groups of Points",
        "Hard"
    ],
    "crawler-log-folder": [
        "Crawler Log Folder",
        "Easy"
    ],
    "maximum-profit-of-operating-a-centennial-wheel": [
        "Maximum Profit of Operating a Centennial Wheel",
        "Medium"
    ],
    "throne-inheritance": [
        "Throne Inheritance",
        "Medium"
    ],
    "maximum-number-of-achievable-transfer-requests": [
        "Maximum Number of Achievable Transfer Requests",
        "Hard"
    ],
    "design-parking-system": [
        "Design Parking System",
        "Easy"
    ],
    "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period": [
        "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "Medium"
    ],
    "find-valid-matrix-given-row-and-column-sums": [
        "Find Valid Matrix Given Row and Column Sums",
        "Medium"
    ],
    "find-servers-that-handled-most-number-of-requests": [
        "Find Servers That Handled Most Number of Requests",
        "Hard"
    ],
    "special-array-with-x-elements-greater-than-or-equal-x": [
        "Special Array With X Elements Greater Than or Equal X",
        "Easy"
    ],
    "even-odd-tree": [
        "Even Odd Tree",
        "Medium"
    ],
    "maximum-number-of-visible-points": [
        "Maximum Number of Visible Points",
        "Hard"
    ],
    "minimum-one-bit-operations-to-make-integers-zero": [
        "Minimum One Bit Operations to Make Integers Zero",
        "Hard"
    ],
    "maximum-nesting-depth-of-the-parentheses": [
        "Maximum Nesting Depth of the Parentheses",
        "Easy"
    ],
    "maximal-network-rank": [
        "Maximal Network Rank",
        "Medium"
    ],
    "split-two-strings-to-make-palindrome": [
        "Split Two Strings to Make Palindrome",
        "Medium"
    ],
    "count-subtrees-with-max-distance-between-cities": [
        "Count Subtrees With Max Distance Between Cities",
        "Hard"
    ],
    "mean-of-array-after-removing-some-elements": [
        "Mean of Array After Removing Some Elements",
        "Easy"
    ],
    "coordinate-with-maximum-network-quality": [
        "Coordinate With Maximum Network Quality",
        "Medium"
    ],
    "number-of-sets-of-k-non-overlapping-line-segments": [
        "Number of Sets of K Non-Overlapping Line Segments",
        "Medium"
    ],
    "fancy-sequence": [
        "Fancy Sequence",
        "Hard"
    ],
    "largest-substring-between-two-equal-characters": [
        "Largest Substring Between Two Equal Characters",
        "Easy"
    ],
    "lexicographically-smallest-string-after-applying-operations": [
        "Lexicographically Smallest String After Applying Operations",
        "Medium"
    ],
    "best-team-with-no-conflicts": [
        "Best Team With No Conflicts",
        "Medium"
    ],
    "graph-connectivity-with-threshold": [
        "Graph Connectivity With Threshold",
        "Hard"
    ],
    "slowest-key": [
        "Slowest Key",
        "Easy"
    ],
    "arithmetic-subarrays": [
        "Arithmetic Subarrays",
        "Medium"
    ],
    "path-with-minimum-effort": [
        "Path With Minimum Effort",
        "Medium"
    ],
    "rank-transform-of-a-matrix": [
        "Rank Transform of a Matrix",
        "Hard"
    ],
    "sort-array-by-increasing-frequency": [
        "Sort Array by Increasing Frequency",
        "Easy"
    ],
    "widest-vertical-area-between-two-points-containing-no-points": [
        "Widest Vertical Area Between Two Points Containing No Points",
        "Medium"
    ],
    "count-substrings-that-differ-by-one-character": [
        "Count Substrings That Differ by One Character",
        "Medium"
    ],
    "number-of-ways-to-form-a-target-string-given-a-dictionary": [
        "Number of Ways to Form a Target String Given a Dictionary",
        "Hard"
    ],
    "check-array-formation-through-concatenation": [
        "Check Array Formation Through Concatenation",
        "Easy"
    ],
    "count-sorted-vowel-strings": [
        "Count Sorted Vowel Strings",
        "Medium"
    ],
    "furthest-building-you-can-reach": [
        "Furthest Building You Can Reach",
        "Medium"
    ],
    "kth-smallest-instructions": [
        "Kth Smallest Instructions",
        "Hard"
    ],
    "get-maximum-in-generated-array": [
        "Get Maximum in Generated Array",
        "Easy"
    ],
    "minimum-deletions-to-make-character-frequencies-unique": [
        "Minimum Deletions to Make Character Frequencies Unique",
        "Medium"
    ],
    "sell-diminishing-valued-colored-balls": [
        "Sell Diminishing-Valued Colored Balls",
        "Medium"
    ],
    "create-sorted-array-through-instructions": [
        "Create Sorted Array through Instructions",
        "Hard"
    ],
    "defuse-the-bomb": [
        "Defuse the Bomb",
        "Easy"
    ],
    "minimum-deletions-to-make-string-balanced": [
        "Minimum Deletions to Make String Balanced",
        "Medium"
    ],
    "minimum-jumps-to-reach-home": [
        "Minimum Jumps to Reach Home",
        "Medium"
    ],
    "distribute-repeating-integers": [
        "Distribute Repeating Integers",
        "Hard"
    ],
    "design-an-ordered-stream": [
        "Design an Ordered Stream",
        "Easy"
    ],
    "determine-if-two-strings-are-close": [
        "Determine if Two Strings Are Close",
        "Medium"
    ],
    "minimum-operations-to-reduce-x-to-zero": [
        "Minimum Operations to Reduce X to Zero",
        "Medium"
    ],
    "maximize-grid-happiness": [
        "Maximize Grid Happiness",
        "Hard"
    ],
    "check-if-two-string-arrays-are-equivalent": [
        "Check If Two String Arrays are Equivalent",
        "Easy"
    ],
    "smallest-string-with-a-given-numeric-value": [
        "Smallest String With A Given Numeric Value",
        "Medium"
    ],
    "ways-to-make-a-fair-array": [
        "Ways to Make a Fair Array",
        "Medium"
    ],
    "minimum-initial-energy-to-finish-tasks": [
        "Minimum Initial Energy to Finish Tasks",
        "Hard"
    ],
    "fix-names-in-a-table": [
        "Fix Names in a Table",
        "Easy"
    ],
    "maximum-repeating-substring": [
        "Maximum Repeating Substring",
        "Easy"
    ],
    "merge-in-between-linked-lists": [
        "Merge In Between Linked Lists",
        "Medium"
    ],
    "design-front-middle-back-queue": [
        "Design Front Middle Back Queue",
        "Medium"
    ],
    "minimum-number-of-removals-to-make-mountain-array": [
        "Minimum Number of Removals to Make Mountain Array",
        "Hard"
    ],
    "richest-customer-wealth": [
        "Richest Customer Wealth",
        "Easy"
    ],
    "find-the-most-competitive-subsequence": [
        "Find the Most Competitive Subsequence",
        "Medium"
    ],
    "minimum-moves-to-make-array-complementary": [
        "Minimum Moves to Make Array Complementary",
        "Medium"
    ],
    "minimize-deviation-in-array": [
        "Minimize Deviation in Array",
        "Hard"
    ],
    "goal-parser-interpretation": [
        "Goal Parser Interpretation",
        "Easy"
    ],
    "max-number-of-k-sum-pairs": [
        "Max Number of K-Sum Pairs",
        "Medium"
    ],
    "concatenation-of-consecutive-binary-numbers": [
        "Concatenation of Consecutive Binary Numbers",
        "Medium"
    ],
    "minimum-incompatibility": [
        "Minimum Incompatibility",
        "Hard"
    ],
    "count-the-number-of-consistent-strings": [
        "Count the Number of Consistent Strings",
        "Easy"
    ],
    "sum-of-absolute-differences-in-a-sorted-array": [
        "Sum of Absolute Differences in a Sorted Array",
        "Medium"
    ],
    "stone-game-vi": [
        "Stone Game VI",
        "Medium"
    ],
    "delivering-boxes-from-storage-to-ports": [
        "Delivering Boxes from Storage to Ports",
        "Hard"
    ],
    "count-of-matches-in-tournament": [
        "Count of Matches in Tournament",
        "Easy"
    ],
    "partitioning-into-minimum-number-of-deci-binary-numbers": [
        "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "Medium"
    ],
    "stone-game-vii": [
        "Stone Game VII",
        "Medium"
    ],
    "maximum-height-by-stacking-cuboids": [
        "Maximum Height by Stacking Cuboids ",
        "Hard"
    ],
    "daily-leads-and-partners": [
        "Daily Leads and Partners",
        "Easy"
    ],
    "reformat-phone-number": [
        "Reformat Phone Number",
        "Easy"
    ],
    "maximum-erasure-value": [
        "Maximum Erasure Value",
        "Medium"
    ],
    "jump-game-vi": [
        "Jump Game VI",
        "Medium"
    ],
    "checking-existence-of-edge-length-limited-paths": [
        "Checking Existence of Edge Length Limited Paths",
        "Hard"
    ],
    "number-of-students-unable-to-eat-lunch": [
        "Number of Students Unable to Eat Lunch",
        "Easy"
    ],
    "average-waiting-time": [
        "Average Waiting Time",
        "Medium"
    ],
    "maximum-binary-string-after-change": [
        "Maximum Binary String After Change",
        "Medium"
    ],
    "minimum-adjacent-swaps-for-k-consecutive-ones": [
        "Minimum Adjacent Swaps for K Consecutive Ones",
        "Hard"
    ],
    "determine-if-string-halves-are-alike": [
        "Determine if String Halves Are Alike",
        "Easy"
    ],
    "maximum-number-of-eaten-apples": [
        "Maximum Number of Eaten Apples",
        "Medium"
    ],
    "where-will-the-ball-fall": [
        "Where Will the Ball Fall",
        "Medium"
    ],
    "maximum-xor-with-an-element-from-array": [
        "Maximum XOR With an Element From Array",
        "Hard"
    ],
    "maximum-units-on-a-truck": [
        "Maximum Units on a Truck",
        "Easy"
    ],
    "count-good-meals": [
        "Count Good Meals",
        "Medium"
    ],
    "ways-to-split-array-into-three-subarrays": [
        "Ways to Split Array Into Three Subarrays",
        "Medium"
    ],
    "minimum-operations-to-make-a-subsequence": [
        "Minimum Operations to Make a Subsequence",
        "Hard"
    ],
    "calculate-money-in-leetcode-bank": [
        "Calculate Money in Leetcode Bank",
        "Easy"
    ],
    "maximum-score-from-removing-substrings": [
        "Maximum Score From Removing Substrings",
        "Medium"
    ],
    "construct-the-lexicographically-largest-valid-sequence": [
        "Construct the Lexicographically Largest Valid Sequence",
        "Medium"
    ],
    "number-of-ways-to-reconstruct-a-tree": [
        "Number Of Ways To Reconstruct A Tree",
        "Hard"
    ],
    "decode-xored-array": [
        "Decode XORed Array",
        "Easy"
    ],
    "swapping-nodes-in-a-linked-list": [
        "Swapping Nodes in a Linked List",
        "Medium"
    ],
    "minimize-hamming-distance-after-swap-operations": [
        "Minimize Hamming Distance After Swap Operations",
        "Medium"
    ],
    "find-minimum-time-to-finish-all-jobs": [
        "Find Minimum Time to Finish All Jobs",
        "Hard"
    ],
    "number-of-rectangles-that-can-form-the-largest-square": [
        "Number Of Rectangles That Can Form The Largest Square",
        "Easy"
    ],
    "tuple-with-same-product": [
        "Tuple with Same Product",
        "Medium"
    ],
    "largest-submatrix-with-rearrangements": [
        "Largest Submatrix With Rearrangements",
        "Medium"
    ],
    "cat-and-mouse-ii": [
        "Cat and Mouse II",
        "Hard"
    ],
    "find-followers-count": [
        "Find Followers Count",
        "Easy"
    ],
    "find-the-highest-altitude": [
        "Find the Highest Altitude",
        "Easy"
    ],
    "minimum-number-of-people-to-teach": [
        "Minimum Number of People to Teach",
        "Medium"
    ],
    "decode-xored-permutation": [
        "Decode XORed Permutation",
        "Medium"
    ],
    "count-ways-to-make-array-with-product": [
        "Count Ways to Make Array With Product",
        "Hard"
    ],
    "latest-time-by-replacing-hidden-digits": [
        "Latest Time by Replacing Hidden Digits",
        "Easy"
    ],
    "change-minimum-characters-to-satisfy-one-of-three-conditions": [
        "Change Minimum Characters to Satisfy One of Three Conditions",
        "Medium"
    ],
    "find-kth-largest-xor-coordinate-value": [
        "Find Kth Largest XOR Coordinate Value",
        "Medium"
    ],
    "building-boxes": [
        "Building Boxes",
        "Hard"
    ],
    "find-total-time-spent-by-each-employee": [
        "Find Total Time Spent by Each Employee",
        "Easy"
    ],
    "maximum-number-of-balls-in-a-box": [
        "Maximum Number of Balls in a Box",
        "Easy"
    ],
    "restore-the-array-from-adjacent-pairs": [
        "Restore the Array From Adjacent Pairs",
        "Medium"
    ],
    "can-you-eat-your-favorite-candy-on-your-favorite-day": [
        "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "Medium"
    ],
    "palindrome-partitioning-iv": [
        "Palindrome Partitioning IV",
        "Hard"
    ],
    "sum-of-unique-elements": [
        "Sum of Unique Elements",
        "Easy"
    ],
    "maximum-absolute-sum-of-any-subarray": [
        "Maximum Absolute Sum of Any Subarray",
        "Medium"
    ],
    "minimum-length-of-string-after-deleting-similar-ends": [
        "Minimum Length of String After Deleting Similar Ends",
        "Medium"
    ],
    "maximum-number-of-events-that-can-be-attended-ii": [
        "Maximum Number of Events That Can Be Attended II",
        "Hard"
    ],
    "check-if-array-is-sorted-and-rotated": [
        "Check if Array Is Sorted and Rotated",
        "Easy"
    ],
    "maximum-score-from-removing-stones": [
        "Maximum Score From Removing Stones",
        "Medium"
    ],
    "largest-merge-of-two-strings": [
        "Largest Merge Of Two Strings",
        "Medium"
    ],
    "closest-subsequence-sum": [
        "Closest Subsequence Sum",
        "Hard"
    ],
    "recyclable-and-low-fat-products": [
        "Recyclable and Low Fat Products",
        "Easy"
    ],
    "minimum-changes-to-make-alternating-binary-string": [
        "Minimum Changes To Make Alternating Binary String",
        "Easy"
    ],
    "count-number-of-homogenous-substrings": [
        "Count Number of Homogenous Substrings",
        "Medium"
    ],
    "minimum-limit-of-balls-in-a-bag": [
        "Minimum Limit of Balls in a Bag",
        "Medium"
    ],
    "minimum-degree-of-a-connected-trio-in-a-graph": [
        "Minimum Degree of a Connected Trio in a Graph",
        "Hard"
    ],
    "longest-nice-substring": [
        "Longest Nice Substring",
        "Easy"
    ],
    "form-array-by-concatenating-subarrays-of-another-array": [
        "Form Array by Concatenating Subarrays of Another Array",
        "Medium"
    ],
    "map-of-highest-peak": [
        "Map of Highest Peak",
        "Medium"
    ],
    "tree-of-coprimes": [
        "Tree of Coprimes",
        "Hard"
    ],
    "merge-strings-alternately": [
        "Merge Strings Alternately",
        "Easy"
    ],
    "minimum-number-of-operations-to-move-all-balls-to-each-box": [
        "Minimum Number of Operations to Move All Balls to Each Box",
        "Medium"
    ],
    "maximum-score-from-performing-multiplication-operations": [
        "Maximum Score from Performing Multiplication Operations",
        "Hard"
    ],
    "maximize-palindrome-length-from-subsequences": [
        "Maximize Palindrome Length From Subsequences",
        "Hard"
    ],
    "count-items-matching-a-rule": [
        "Count Items Matching a Rule",
        "Easy"
    ],
    "closest-dessert-cost": [
        "Closest Dessert Cost",
        "Medium"
    ],
    "equal-sum-arrays-with-minimum-number-of-operations": [
        "Equal Sum Arrays With Minimum Number of Operations",
        "Medium"
    ],
    "car-fleet-ii": [
        "Car Fleet II",
        "Hard"
    ],
    "find-nearest-point-that-has-the-same-x-or-y-coordinate": [
        "Find Nearest Point That Has the Same X or Y Coordinate",
        "Easy"
    ],
    "check-if-number-is-a-sum-of-powers-of-three": [
        "Check if Number is a Sum of Powers of Three",
        "Medium"
    ],
    "sum-of-beauty-of-all-substrings": [
        "Sum of Beauty of All Substrings",
        "Medium"
    ],
    "count-pairs-of-nodes": [
        "Count Pairs Of Nodes",
        "Hard"
    ],
    "check-if-binary-string-has-at-most-one-segment-of-ones": [
        "Check if Binary String Has at Most One Segment of Ones",
        "Easy"
    ],
    "minimum-elements-to-add-to-form-a-given-sum": [
        "Minimum Elements to Add to Form a Given Sum",
        "Medium"
    ],
    "number-of-restricted-paths-from-first-to-last-node": [
        "Number of Restricted Paths From First to Last Node",
        "Medium"
    ],
    "make-the-xor-of-all-segments-equal-to-zero": [
        "Make the XOR of All Segments Equal to Zero",
        "Hard"
    ],
    "check-if-one-string-swap-can-make-strings-equal": [
        "Check if One String Swap Can Make Strings Equal",
        "Easy"
    ],
    "find-center-of-star-graph": [
        "Find Center of Star Graph",
        "Easy"
    ],
    "maximum-average-pass-ratio": [
        "Maximum Average Pass Ratio",
        "Medium"
    ],
    "maximum-score-of-a-good-subarray": [
        "Maximum Score of a Good Subarray",
        "Hard"
    ],
    "rearrange-products-table": [
        "Rearrange Products Table",
        "Easy"
    ],
    "second-largest-digit-in-a-string": [
        "Second Largest Digit in a String",
        "Easy"
    ],
    "design-authentication-manager": [
        "Design Authentication Manager",
        "Medium"
    ],
    "maximum-number-of-consecutive-values-you-can-make": [
        "Maximum Number of Consecutive Values You Can Make",
        "Medium"
    ],
    "maximize-score-after-n-operations": [
        "Maximize Score After N Operations",
        "Hard"
    ],
    "maximum-ascending-subarray-sum": [
        "Maximum Ascending Subarray Sum",
        "Easy"
    ],
    "number-of-orders-in-the-backlog": [
        "Number of Orders in the Backlog",
        "Medium"
    ],
    "maximum-value-at-a-given-index-in-a-bounded-array": [
        "Maximum Value at a Given Index in a Bounded Array",
        "Medium"
    ],
    "count-pairs-with-xor-in-a-range": [
        "Count Pairs With XOR in a Range",
        "Hard"
    ],
    "number-of-different-integers-in-a-string": [
        "Number of Different Integers in a String",
        "Easy"
    ],
    "minimum-number-of-operations-to-reinitialize-a-permutation": [
        "Minimum Number of Operations to Reinitialize a Permutation",
        "Medium"
    ],
    "evaluate-the-bracket-pairs-of-a-string": [
        "Evaluate the Bracket Pairs of a String",
        "Medium"
    ],
    "maximize-number-of-nice-divisors": [
        "Maximize Number of Nice Divisors",
        "Hard"
    ],
    "determine-color-of-a-chessboard-square": [
        "Determine Color of a Chessboard Square",
        "Easy"
    ],
    "sentence-similarity-iii": [
        "Sentence Similarity III",
        "Medium"
    ],
    "count-nice-pairs-in-an-array": [
        "Count Nice Pairs in an Array",
        "Medium"
    ],
    "maximum-number-of-groups-getting-fresh-donuts": [
        "Maximum Number of Groups Getting Fresh Donuts",
        "Hard"
    ],
    "truncate-sentence": [
        "Truncate Sentence",
        "Easy"
    ],
    "finding-the-users-active-minutes": [
        "Finding the Users Active Minutes",
        "Medium"
    ],
    "minimum-absolute-sum-difference": [
        "Minimum Absolute Sum Difference",
        "Medium"
    ],
    "number-of-different-subsequences-gcds": [
        "Number of Different Subsequences GCDs",
        "Hard"
    ],
    "sign-of-the-product-of-an-array": [
        "Sign of the Product of an Array",
        "Easy"
    ],
    "find-the-winner-of-the-circular-game": [
        "Find the Winner of the Circular Game",
        "Medium"
    ],
    "minimum-sideway-jumps": [
        "Minimum Sideway Jumps",
        "Medium"
    ],
    "finding-mk-average": [
        "Finding MK Average",
        "Hard"
    ],
    "minimum-operations-to-make-the-array-increasing": [
        "Minimum Operations to Make the Array Increasing",
        "Easy"
    ],
    "queries-on-number-of-points-inside-a-circle": [
        "Queries on Number of Points Inside a Circle",
        "Medium"
    ],
    "maximum-xor-for-each-query": [
        "Maximum XOR for Each Query",
        "Medium"
    ],
    "minimum-number-of-operations-to-make-string-sorted": [
        "Minimum Number of Operations to Make String Sorted",
        "Hard"
    ],
    "check-if-the-sentence-is-pangram": [
        "Check if the Sentence Is Pangram",
        "Easy"
    ],
    "maximum-ice-cream-bars": [
        "Maximum Ice Cream Bars",
        "Medium"
    ],
    "single-threaded-cpu": [
        "Single-Threaded CPU",
        "Medium"
    ],
    "find-xor-sum-of-all-pairs-bitwise-and": [
        "Find XOR Sum of All Pairs Bitwise AND",
        "Hard"
    ],
    "sum-of-digits-in-base-k": [
        "Sum of Digits in Base K",
        "Easy"
    ],
    "frequency-of-the-most-frequent-element": [
        "Frequency of the Most Frequent Element",
        "Medium"
    ],
    "longest-substring-of-all-vowels-in-order": [
        "Longest Substring Of All Vowels in Order",
        "Medium"
    ],
    "maximum-building-height": [
        "Maximum Building Height",
        "Hard"
    ],
    "replace-all-digits-with-characters": [
        "Replace All Digits with Characters",
        "Easy"
    ],
    "seat-reservation-manager": [
        "Seat Reservation Manager",
        "Medium"
    ],
    "maximum-element-after-decreasing-and-rearranging": [
        "Maximum Element After Decreasing and Rearranging",
        "Medium"
    ],
    "closest-room": [
        "Closest Room",
        "Hard"
    ],
    "minimum-distance-to-the-target-element": [
        "Minimum Distance to the Target Element",
        "Easy"
    ],
    "splitting-a-string-into-descending-consecutive-values": [
        "Splitting a String Into Descending Consecutive Values",
        "Medium"
    ],
    "minimum-adjacent-swaps-to-reach-the-kth-smallest-number": [
        "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "Medium"
    ],
    "minimum-interval-to-include-each-query": [
        "Minimum Interval to Include Each Query",
        "Hard"
    ],
    "maximum-population-year": [
        "Maximum Population Year",
        "Easy"
    ],
    "maximum-distance-between-a-pair-of-values": [
        "Maximum Distance Between a Pair of Values",
        "Medium"
    ],
    "maximum-subarray-min-product": [
        "Maximum Subarray Min-Product",
        "Medium"
    ],
    "largest-color-value-in-a-directed-graph": [
        "Largest Color Value in a Directed Graph",
        "Hard"
    ],
    "sorting-the-sentence": [
        "Sorting the Sentence",
        "Easy"
    ],
    "incremental-memory-leak": [
        "Incremental Memory Leak",
        "Medium"
    ],
    "rotating-the-box": [
        "Rotating the Box",
        "Medium"
    ],
    "sum-of-floored-pairs": [
        "Sum of Floored Pairs",
        "Hard"
    ],
    "sum-of-all-subset-xor-totals": [
        "Sum of All Subset XOR Totals",
        "Easy"
    ],
    "minimum-number-of-swaps-to-make-the-binary-string-alternating": [
        "Minimum Number of Swaps to Make the Binary String Alternating",
        "Medium"
    ],
    "finding-pairs-with-a-certain-sum": [
        "Finding Pairs With a Certain Sum",
        "Medium"
    ],
    "number-of-ways-to-rearrange-sticks-with-k-sticks-visible": [
        "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "Hard"
    ],
    "longer-contiguous-segments-of-ones-than-zeros": [
        "Longer Contiguous Segments of Ones than Zeros",
        "Easy"
    ],
    "minimum-speed-to-arrive-on-time": [
        "Minimum Speed to Arrive on Time",
        "Medium"
    ],
    "jump-game-vii": [
        "Jump Game VII",
        "Medium"
    ],
    "stone-game-viii": [
        "Stone Game VIII",
        "Hard"
    ],
    "calculate-special-bonus": [
        "Calculate Special Bonus",
        "Easy"
    ],
    "substrings-of-size-three-with-distinct-characters": [
        "Substrings of Size Three with Distinct Characters",
        "Easy"
    ],
    "minimize-maximum-pair-sum-in-array": [
        "Minimize Maximum Pair Sum in Array",
        "Medium"
    ],
    "get-biggest-three-rhombus-sums-in-a-grid": [
        "Get Biggest Three Rhombus Sums in a Grid",
        "Medium"
    ],
    "minimum-xor-sum-of-two-arrays": [
        "Minimum XOR Sum of Two Arrays",
        "Hard"
    ],
    "check-if-word-equals-summation-of-two-words": [
        "Check if Word Equals Summation of Two Words",
        "Easy"
    ],
    "maximum-value-after-insertion": [
        "Maximum Value after Insertion",
        "Medium"
    ],
    "process-tasks-using-servers": [
        "Process Tasks Using Servers",
        "Medium"
    ],
    "minimum-skips-to-arrive-at-meeting-on-time": [
        "Minimum Skips to Arrive at Meeting On Time",
        "Hard"
    ],
    "egg-drop-with-2-eggs-and-n-floors": [
        "Egg Drop With 2 Eggs and N Floors",
        "Medium"
    ],
    "determine-whether-matrix-can-be-obtained-by-rotation": [
        "Determine Whether Matrix Can Be Obtained By Rotation",
        "Easy"
    ],
    "reduction-operations-to-make-the-array-elements-equal": [
        "Reduction Operations to Make the Array Elements Equal",
        "Medium"
    ],
    "minimum-number-of-flips-to-make-the-binary-string-alternating": [
        "Minimum Number of Flips to Make the Binary String Alternating",
        "Medium"
    ],
    "minimum-space-wasted-from-packaging": [
        "Minimum Space Wasted From Packaging",
        "Hard"
    ],
    "the-latest-login-in-2020": [
        "The Latest Login in 2020",
        "Easy"
    ],
    "check-if-all-the-integers-in-a-range-are-covered": [
        "Check if All the Integers in a Range Are Covered",
        "Easy"
    ],
    "find-the-student-that-will-replace-the-chalk": [
        "Find the Student that Will Replace the Chalk",
        "Medium"
    ],
    "largest-magic-square": [
        "Largest Magic Square",
        "Medium"
    ],
    "minimum-cost-to-change-the-final-value-of-expression": [
        "Minimum Cost to Change the Final Value of Expression",
        "Hard"
    ],
    "redistribute-characters-to-make-all-strings-equal": [
        "Redistribute Characters to Make All Strings Equal",
        "Easy"
    ],
    "maximum-number-of-removable-characters": [
        "Maximum Number of Removable Characters",
        "Medium"
    ],
    "merge-triplets-to-form-target-triplet": [
        "Merge Triplets to Form Target Triplet",
        "Medium"
    ],
    "the-earliest-and-latest-rounds-where-players-compete": [
        "The Earliest and Latest Rounds Where Players Compete",
        "Hard"
    ],
    "find-a-peak-element-ii": [
        "Find a Peak Element II",
        "Medium"
    ],
    "largest-odd-number-in-string": [
        "Largest Odd Number in String",
        "Easy"
    ],
    "the-number-of-full-rounds-you-have-played": [
        "The Number of Full Rounds You Have Played",
        "Medium"
    ],
    "count-sub-islands": [
        "Count Sub Islands",
        "Medium"
    ],
    "minimum-absolute-difference-queries": [
        "Minimum Absolute Difference Queries",
        "Medium"
    ],
    "remove-one-element-to-make-the-array-strictly-increasing": [
        "Remove One Element to Make the Array Strictly Increasing",
        "Easy"
    ],
    "remove-all-occurrences-of-a-substring": [
        "Remove All Occurrences of a Substring",
        "Medium"
    ],
    "maximum-alternating-subsequence-sum": [
        "Maximum Alternating Subsequence Sum",
        "Medium"
    ],
    "design-movie-rental-system": [
        "Design Movie Rental System",
        "Hard"
    ],
    "maximum-product-difference-between-two-pairs": [
        "Maximum Product Difference Between Two Pairs",
        "Easy"
    ],
    "cyclically-rotating-a-grid": [
        "Cyclically Rotating a Grid",
        "Medium"
    ],
    "number-of-wonderful-substrings": [
        "Number of Wonderful Substrings",
        "Medium"
    ],
    "count-ways-to-build-rooms-in-an-ant-colony": [
        "Count Ways to Build Rooms in an Ant Colony",
        "Hard"
    ],
    "build-array-from-permutation": [
        "Build Array from Permutation",
        "Easy"
    ],
    "eliminate-maximum-number-of-monsters": [
        "Eliminate Maximum Number of Monsters",
        "Medium"
    ],
    "count-good-numbers": [
        "Count Good Numbers",
        "Medium"
    ],
    "longest-common-subpath": [
        "Longest Common Subpath",
        "Hard"
    ],
    "count-square-sum-triples": [
        "Count Square Sum Triples",
        "Easy"
    ],
    "nearest-exit-from-entrance-in-maze": [
        "Nearest Exit from Entrance in Maze",
        "Medium"
    ],
    "sum-game": [
        "Sum Game",
        "Medium"
    ],
    "minimum-cost-to-reach-destination-in-time": [
        "Minimum Cost to Reach Destination in Time",
        "Hard"
    ],
    "concatenation-of-array": [
        "Concatenation of Array",
        "Easy"
    ],
    "unique-length-3-palindromic-subsequences": [
        "Unique Length-3 Palindromic Subsequences",
        "Medium"
    ],
    "painting-a-grid-with-three-different-colors": [
        "Painting a Grid With Three Different Colors",
        "Hard"
    ],
    "merge-bsts-to-create-single-bst": [
        "Merge BSTs to Create Single BST",
        "Hard"
    ],
    "maximum-number-of-words-you-can-type": [
        "Maximum Number of Words You Can Type",
        "Easy"
    ],
    "add-minimum-number-of-rungs": [
        "Add Minimum Number of Rungs",
        "Medium"
    ],
    "maximum-number-of-points-with-cost": [
        "Maximum Number of Points with Cost",
        "Medium"
    ],
    "maximum-genetic-difference-query": [
        "Maximum Genetic Difference Query",
        "Hard"
    ],
    "check-if-all-characters-have-equal-number-of-occurrences": [
        "Check if All Characters Have Equal Number of Occurrences",
        "Easy"
    ],
    "the-number-of-the-smallest-unoccupied-chair": [
        "The Number of the Smallest Unoccupied Chair",
        "Medium"
    ],
    "describe-the-painting": [
        "Describe the Painting",
        "Medium"
    ],
    "number-of-visible-people-in-a-queue": [
        "Number of Visible People in a Queue",
        "Hard"
    ],
    "sum-of-digits-of-string-after-convert": [
        "Sum of Digits of String After Convert",
        "Easy"
    ],
    "largest-number-after-mutating-substring": [
        "Largest Number After Mutating Substring",
        "Medium"
    ],
    "maximum-compatibility-score-sum": [
        "Maximum Compatibility Score Sum",
        "Medium"
    ],
    "delete-duplicate-folders-in-system": [
        "Delete Duplicate Folders in System",
        "Hard"
    ],
    "three-divisors": [
        "Three Divisors",
        "Easy"
    ],
    "maximum-number-of-weeks-for-which-you-can-work": [
        "Maximum Number of Weeks for Which You Can Work",
        "Medium"
    ],
    "minimum-garden-perimeter-to-collect-enough-apples": [
        "Minimum Garden Perimeter to Collect Enough Apples",
        "Medium"
    ],
    "count-number-of-special-subsequences": [
        "Count Number of Special Subsequences",
        "Hard"
    ],
    "delete-characters-to-make-fancy-string": [
        "Delete Characters to Make Fancy String",
        "Easy"
    ],
    "check-if-move-is-legal": [
        "Check if Move is Legal",
        "Medium"
    ],
    "minimum-total-space-wasted-with-k-resizing-operations": [
        "Minimum Total Space Wasted With K Resizing Operations",
        "Medium"
    ],
    "maximum-product-of-the-length-of-two-palindromic-substrings": [
        "Maximum Product of the Length of Two Palindromic Substrings",
        "Hard"
    ],
    "check-if-string-is-a-prefix-of-array": [
        "Check If String Is a Prefix of Array",
        "Easy"
    ],
    "remove-stones-to-minimize-the-total": [
        "Remove Stones to Minimize the Total",
        "Medium"
    ],
    "minimum-number-of-swaps-to-make-the-string-balanced": [
        "Minimum Number of Swaps to Make the String Balanced",
        "Medium"
    ],
    "find-the-longest-valid-obstacle-course-at-each-position": [
        "Find the Longest Valid Obstacle Course at Each Position",
        "Hard"
    ],
    "employees-with-missing-information": [
        "Employees With Missing Information",
        "Easy"
    ],
    "number-of-strings-that-appear-as-substrings-in-word": [
        "Number of Strings That Appear as Substrings in Word",
        "Easy"
    ],
    "array-with-elements-not-equal-to-average-of-neighbors": [
        "Array With Elements Not Equal to Average of Neighbors",
        "Medium"
    ],
    "minimum-non-zero-product-of-the-array-elements": [
        "Minimum Non-Zero Product of the Array Elements",
        "Medium"
    ],
    "last-day-where-you-can-still-cross": [
        "Last Day Where You Can Still Cross",
        "Hard"
    ],
    "find-if-path-exists-in-graph": [
        "Find if Path Exists in Graph",
        "Easy"
    ],
    "minimum-time-to-type-word-using-special-typewriter": [
        "Minimum Time to Type Word Using Special Typewriter",
        "Easy"
    ],
    "maximum-matrix-sum": [
        "Maximum Matrix Sum",
        "Medium"
    ],
    "number-of-ways-to-arrive-at-destination": [
        "Number of Ways to Arrive at Destination",
        "Medium"
    ],
    "number-of-ways-to-separate-numbers": [
        "Number of Ways to Separate Numbers",
        "Hard"
    ],
    "find-greatest-common-divisor-of-array": [
        "Find Greatest Common Divisor of Array",
        "Easy"
    ],
    "find-unique-binary-string": [
        "Find Unique Binary String",
        "Medium"
    ],
    "minimize-the-difference-between-target-and-chosen-elements": [
        "Minimize the Difference Between Target and Chosen Elements",
        "Medium"
    ],
    "find-array-given-subset-sums": [
        "Find Array Given Subset Sums",
        "Hard"
    ],
    "minimum-difference-between-highest-and-lowest-of-k-scores": [
        "Minimum Difference Between Highest and Lowest of K Scores",
        "Easy"
    ],
    "find-the-kth-largest-integer-in-the-array": [
        "Find the Kth Largest Integer in the Array",
        "Medium"
    ],
    "minimum-number-of-work-sessions-to-finish-the-tasks": [
        "Minimum Number of Work Sessions to Finish the Tasks",
        "Medium"
    ],
    "number-of-unique-good-subsequences": [
        "Number of Unique Good Subsequences",
        "Hard"
    ],
    "find-the-middle-index-in-array": [
        "Find the Middle Index in Array",
        "Easy"
    ],
    "find-all-groups-of-farmland": [
        "Find All Groups of Farmland",
        "Medium"
    ],
    "operations-on-tree": [
        "Operations on Tree",
        "Medium"
    ],
    "the-number-of-good-subsets": [
        "The Number of Good Subsets",
        "Hard"
    ],
    "count-special-quadruplets": [
        "Count Special Quadruplets",
        "Easy"
    ],
    "the-number-of-weak-characters-in-the-game": [
        "The Number of Weak Characters in the Game",
        "Medium"
    ],
    "first-day-where-you-have-been-in-all-the-rooms": [
        "First Day Where You Have Been in All the Rooms",
        "Medium"
    ],
    "gcd-sort-of-an-array": [
        "GCD Sort of an Array",
        "Hard"
    ],
    "reverse-prefix-of-word": [
        "Reverse Prefix of Word",
        "Easy"
    ],
    "number-of-pairs-of-interchangeable-rectangles": [
        "Number of Pairs of Interchangeable Rectangles",
        "Medium"
    ],
    "maximum-product-of-the-length-of-two-palindromic-subsequences": [
        "Maximum Product of the Length of Two Palindromic Subsequences",
        "Medium"
    ],
    "smallest-missing-genetic-value-in-each-subtree": [
        "Smallest Missing Genetic Value in Each Subtree",
        "Hard"
    ],
    "count-number-of-pairs-with-absolute-difference-k": [
        "Count Number of Pairs With Absolute Difference K",
        "Easy"
    ],
    "find-original-array-from-doubled-array": [
        "Find Original Array From Doubled Array",
        "Medium"
    ],
    "maximum-earnings-from-taxi": [
        "Maximum Earnings From Taxi",
        "Medium"
    ],
    "minimum-number-of-operations-to-make-array-continuous": [
        "Minimum Number of Operations to Make Array Continuous",
        "Hard"
    ],
    "final-value-of-variable-after-performing-operations": [
        "Final Value of Variable After Performing Operations",
        "Easy"
    ],
    "sum-of-beauty-in-the-array": [
        "Sum of Beauty in the Array",
        "Medium"
    ],
    "detect-squares": [
        "Detect Squares",
        "Medium"
    ],
    "longest-subsequence-repeated-k-times": [
        "Longest Subsequence Repeated k Times",
        "Hard"
    ],
    "maximum-difference-between-increasing-elements": [
        "Maximum Difference Between Increasing Elements",
        "Easy"
    ],
    "grid-game": [
        "Grid Game",
        "Medium"
    ],
    "check-if-word-can-be-placed-in-crossword": [
        "Check if Word Can Be Placed In Crossword",
        "Medium"
    ],
    "the-score-of-students-solving-math-expression": [
        "The Score of Students Solving Math Expression",
        "Hard"
    ],
    "convert-1d-array-into-2d-array": [
        "Convert 1D Array Into 2D Array",
        "Easy"
    ],
    "number-of-pairs-of-strings-with-concatenation-equal-to-target": [
        "Number of Pairs of Strings With Concatenation Equal to Target",
        "Medium"
    ],
    "maximize-the-confusion-of-an-exam": [
        "Maximize the Confusion of an Exam",
        "Medium"
    ],
    "maximum-number-of-ways-to-partition-an-array": [
        "Maximum Number of Ways to Partition an Array",
        "Hard"
    ],
    "minimum-moves-to-convert-string": [
        "Minimum Moves to Convert String",
        "Easy"
    ],
    "find-missing-observations": [
        "Find Missing Observations",
        "Medium"
    ],
    "stone-game-ix": [
        "Stone Game IX",
        "Medium"
    ],
    "smallest-k-length-subsequence-with-occurrences-of-a-letter": [
        "Smallest K-Length Subsequence With Occurrences of a Letter",
        "Hard"
    ],
    "two-out-of-three": [
        "Two Out of Three",
        "Easy"
    ],
    "minimum-operations-to-make-a-uni-value-grid": [
        "Minimum Operations to Make a Uni-Value Grid",
        "Medium"
    ],
    "stock-price-fluctuation": [
        "Stock Price Fluctuation ",
        "Medium"
    ],
    "partition-array-into-two-arrays-to-minimize-sum-difference": [
        "Partition Array Into Two Arrays to Minimize Sum Difference",
        "Hard"
    ],
    "minimum-number-of-moves-to-seat-everyone": [
        "Minimum Number of Moves to Seat Everyone",
        "Easy"
    ],
    "remove-colored-pieces-if-both-neighbors-are-the-same-color": [
        "Remove Colored Pieces if Both Neighbors are the Same Color",
        "Medium"
    ],
    "the-time-when-the-network-becomes-idle": [
        "The Time When the Network Becomes Idle",
        "Medium"
    ],
    "kth-smallest-product-of-two-sorted-arrays": [
        "Kth Smallest Product of Two Sorted Arrays",
        "Hard"
    ],
    "check-if-numbers-are-ascending-in-a-sentence": [
        "Check if Numbers Are Ascending in a Sentence",
        "Easy"
    ],
    "simple-bank-system": [
        "Simple Bank System",
        "Medium"
    ],
    "count-number-of-maximum-bitwise-or-subsets": [
        "Count Number of Maximum Bitwise-OR Subsets",
        "Medium"
    ],
    "second-minimum-time-to-reach-destination": [
        "Second Minimum Time to Reach Destination",
        "Hard"
    ],
    "number-of-valid-words-in-a-sentence": [
        "Number of Valid Words in a Sentence",
        "Easy"
    ],
    "next-greater-numerically-balanced-number": [
        "Next Greater Numerically Balanced Number",
        "Medium"
    ],
    "count-nodes-with-the-highest-score": [
        "Count Nodes With the Highest Score",
        "Medium"
    ],
    "parallel-courses-iii": [
        "Parallel Courses III",
        "Hard"
    ],
    "kth-distinct-string-in-an-array": [
        "Kth Distinct String in an Array",
        "Easy"
    ],
    "two-best-non-overlapping-events": [
        "Two Best Non-Overlapping Events",
        "Medium"
    ],
    "plates-between-candles": [
        "Plates Between Candles",
        "Medium"
    ],
    "number-of-valid-move-combinations-on-chessboard": [
        "Number of Valid Move Combinations On Chessboard",
        "Hard"
    ],
    "smallest-index-with-equal-value": [
        "Smallest Index With Equal Value",
        "Easy"
    ],
    "find-the-minimum-and-maximum-number-of-nodes-between-critical-points": [
        "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "Medium"
    ],
    "minimum-operations-to-convert-number": [
        "Minimum Operations to Convert Number",
        "Medium"
    ],
    "check-if-an-original-string-exists-given-two-encoded-strings": [
        "Check if an Original String Exists Given Two Encoded Strings",
        "Hard"
    ],
    "count-vowel-substrings-of-a-string": [
        "Count Vowel Substrings of a String",
        "Easy"
    ],
    "vowels-of-all-substrings": [
        "Vowels of All Substrings",
        "Medium"
    ],
    "minimized-maximum-of-products-distributed-to-any-store": [
        "Minimized Maximum of Products Distributed to Any Store",
        "Medium"
    ],
    "maximum-path-quality-of-a-graph": [
        "Maximum Path Quality of a Graph",
        "Hard"
    ],
    "check-whether-two-strings-are-almost-equivalent": [
        "Check Whether Two Strings are Almost Equivalent",
        "Easy"
    ],
    "walking-robot-simulation-ii": [
        "Walking Robot Simulation II",
        "Medium"
    ],
    "most-beautiful-item-for-each-query": [
        "Most Beautiful Item for Each Query",
        "Medium"
    ],
    "maximum-number-of-tasks-you-can-assign": [
        "Maximum Number of Tasks You Can Assign",
        "Hard"
    ],
    "time-needed-to-buy-tickets": [
        "Time Needed to Buy Tickets",
        "Easy"
    ],
    "reverse-nodes-in-even-length-groups": [
        "Reverse Nodes in Even Length Groups",
        "Medium"
    ],
    "decode-the-slanted-ciphertext": [
        "Decode the Slanted Ciphertext",
        "Medium"
    ],
    "process-restricted-friend-requests": [
        "Process Restricted Friend Requests",
        "Hard"
    ],
    "two-furthest-houses-with-different-colors": [
        "Two Furthest Houses With Different Colors",
        "Easy"
    ],
    "watering-plants": [
        "Watering Plants",
        "Medium"
    ],
    "range-frequency-queries": [
        "Range Frequency Queries",
        "Medium"
    ],
    "sum-of-k-mirror-numbers": [
        "Sum of k-Mirror Numbers",
        "Hard"
    ],
    "count-common-words-with-one-occurrence": [
        "Count Common Words With One Occurrence",
        "Easy"
    ],
    "minimum-number-of-buckets-required-to-collect-rainwater-from-houses": [
        "Minimum Number of Buckets Required to Collect Rainwater from Houses",
        "Medium"
    ],
    "minimum-cost-homecoming-of-a-robot-in-a-grid": [
        "Minimum Cost Homecoming of a Robot in a Grid",
        "Medium"
    ],
    "count-fertile-pyramids-in-a-land": [
        "Count Fertile Pyramids in a Land",
        "Hard"
    ],
    "find-target-indices-after-sorting-array": [
        "Find Target Indices After Sorting Array",
        "Easy"
    ],
    "k-radius-subarray-averages": [
        "K Radius Subarray Averages",
        "Medium"
    ],
    "removing-minimum-and-maximum-from-array": [
        "Removing Minimum and Maximum From Array",
        "Medium"
    ],
    "find-all-people-with-secret": [
        "Find All People With Secret",
        "Hard"
    ],
    "finding-3-digit-even-numbers": [
        "Finding 3-Digit Even Numbers",
        "Easy"
    ],
    "delete-the-middle-node-of-a-linked-list": [
        "Delete the Middle Node of a Linked List",
        "Medium"
    ],
    "step-by-step-directions-from-a-binary-tree-node-to-another": [
        "Step-By-Step Directions From a Binary Tree Node to Another",
        "Medium"
    ],
    "valid-arrangement-of-pairs": [
        "Valid Arrangement of Pairs",
        "Hard"
    ],
    "find-subsequence-of-length-k-with-the-largest-sum": [
        "Find Subsequence of Length K With the Largest Sum",
        "Easy"
    ],
    "find-good-days-to-rob-the-bank": [
        "Find Good Days to Rob the Bank",
        "Medium"
    ],
    "detonate-the-maximum-bombs": [
        "Detonate the Maximum Bombs",
        "Medium"
    ],
    "sequentially-ordinal-rank-tracker": [
        "Sequentially Ordinal Rank Tracker",
        "Hard"
    ],
    "rings-and-rods": [
        "Rings and Rods",
        "Easy"
    ],
    "sum-of-subarray-ranges": [
        "Sum of Subarray Ranges",
        "Medium"
    ],
    "watering-plants-ii": [
        "Watering Plants II",
        "Medium"
    ],
    "maximum-fruits-harvested-after-at-most-k-steps": [
        "Maximum Fruits Harvested After at Most K Steps",
        "Hard"
    ],
    "find-first-palindromic-string-in-the-array": [
        "Find First Palindromic String in the Array",
        "Easy"
    ],
    "adding-spaces-to-a-string": [
        "Adding Spaces to a String",
        "Medium"
    ],
    "number-of-smooth-descent-periods-of-a-stock": [
        "Number of Smooth Descent Periods of a Stock",
        "Medium"
    ],
    "minimum-operations-to-make-the-array-k-increasing": [
        "Minimum Operations to Make the Array K-Increasing",
        "Hard"
    ],
    "maximum-number-of-words-found-in-sentences": [
        "Maximum Number of Words Found in Sentences",
        "Easy"
    ],
    "find-all-possible-recipes-from-given-supplies": [
        "Find All Possible Recipes from Given Supplies",
        "Medium"
    ],
    "check-if-a-parentheses-string-can-be-valid": [
        "Check if a Parentheses String Can Be Valid",
        "Medium"
    ],
    "abbreviating-the-product-of-a-range": [
        "Abbreviating the Product of a Range",
        "Hard"
    ],
    "a-number-after-a-double-reversal": [
        "A Number After a Double Reversal",
        "Easy"
    ],
    "execution-of-all-suffix-instructions-staying-in-a-grid": [
        "Execution of All Suffix Instructions Staying in a Grid",
        "Medium"
    ],
    "intervals-between-identical-elements": [
        "Intervals Between Identical Elements",
        "Medium"
    ],
    "recover-the-original-array": [
        "Recover the Original Array",
        "Hard"
    ],
    "check-if-all-as-appears-before-all-bs": [
        "Check if All A's Appears Before All B's",
        "Easy"
    ],
    "number-of-laser-beams-in-a-bank": [
        "Number of Laser Beams in a Bank",
        "Medium"
    ],
    "destroying-asteroids": [
        "Destroying Asteroids",
        "Medium"
    ],
    "maximum-employees-to-be-invited-to-a-meeting": [
        "Maximum Employees to Be Invited to a Meeting",
        "Hard"
    ],
    "capitalize-the-title": [
        "Capitalize the Title",
        "Easy"
    ],
    "maximum-twin-sum-of-a-linked-list": [
        "Maximum Twin Sum of a Linked List",
        "Medium"
    ],
    "longest-palindrome-by-concatenating-two-letter-words": [
        "Longest Palindrome by Concatenating Two Letter Words",
        "Medium"
    ],
    "stamping-the-grid": [
        "Stamping the Grid",
        "Hard"
    ],
    "check-if-every-row-and-column-contains-all-numbers": [
        "Check if Every Row and Column Contains All Numbers",
        "Easy"
    ],
    "minimum-swaps-to-group-all-1s-together-ii": [
        "Minimum Swaps to Group All 1's Together II",
        "Medium"
    ],
    "count-words-obtained-after-adding-a-letter": [
        "Count Words Obtained After Adding a Letter",
        "Medium"
    ],
    "earliest-possible-day-of-full-bloom": [
        "Earliest Possible Day of Full Bloom",
        "Hard"
    ],
    "divide-a-string-into-groups-of-size-k": [
        "Divide a String Into Groups of Size k",
        "Easy"
    ],
    "minimum-moves-to-reach-target-score": [
        "Minimum Moves to Reach Target Score",
        "Medium"
    ],
    "solving-questions-with-brainpower": [
        "Solving Questions With Brainpower",
        "Medium"
    ],
    "maximum-running-time-of-n-computers": [
        "Maximum Running Time of N Computers",
        "Hard"
    ],
    "minimum-cost-of-buying-candies-with-discount": [
        "Minimum Cost of Buying Candies With Discount",
        "Easy"
    ],
    "count-the-hidden-sequences": [
        "Count the Hidden Sequences",
        "Medium"
    ],
    "k-highest-ranked-items-within-a-price-range": [
        "K Highest Ranked Items Within a Price Range",
        "Medium"
    ],
    "number-of-ways-to-divide-a-long-corridor": [
        "Number of Ways to Divide a Long Corridor",
        "Hard"
    ],
    "count-elements-with-strictly-smaller-and-greater-elements": [
        "Count Elements With Strictly Smaller and Greater Elements ",
        "Easy"
    ],
    "rearrange-array-elements-by-sign": [
        "Rearrange Array Elements by Sign",
        "Medium"
    ],
    "find-all-lonely-numbers-in-the-array": [
        "Find All Lonely Numbers in the Array",
        "Medium"
    ],
    "maximum-good-people-based-on-statements": [
        "Maximum Good People Based on Statements",
        "Hard"
    ],
    "keep-multiplying-found-values-by-two": [
        "Keep Multiplying Found Values by Two",
        "Easy"
    ],
    "all-divisions-with-the-highest-score-of-a-binary-array": [
        "All Divisions With the Highest Score of a Binary Array",
        "Medium"
    ],
    "find-substring-with-given-hash-value": [
        "Find Substring With Given Hash Value",
        "Hard"
    ],
    "groups-of-strings": [
        "Groups of Strings",
        "Hard"
    ],
    "minimum-sum-of-four-digit-number-after-splitting-digits": [
        "Minimum Sum of Four Digit Number After Splitting Digits",
        "Easy"
    ],
    "partition-array-according-to-given-pivot": [
        "Partition Array According to Given Pivot",
        "Medium"
    ],
    "minimum-cost-to-set-cooking-time": [
        "Minimum Cost to Set Cooking Time",
        "Medium"
    ],
    "minimum-difference-in-sums-after-removal-of-elements": [
        "Minimum Difference in Sums After Removal of Elements",
        "Hard"
    ],
    "sort-even-and-odd-indices-independently": [
        "Sort Even and Odd Indices Independently",
        "Easy"
    ],
    "smallest-value-of-the-rearranged-number": [
        "Smallest Value of the Rearranged Number",
        "Medium"
    ],
    "design-bitset": [
        "Design Bitset",
        "Medium"
    ],
    "minimum-time-to-remove-all-cars-containing-illegal-goods": [
        "Minimum Time to Remove All Cars Containing Illegal Goods",
        "Hard"
    ],
    "count-operations-to-obtain-zero": [
        "Count Operations to Obtain Zero",
        "Easy"
    ],
    "minimum-operations-to-make-the-array-alternating": [
        "Minimum Operations to Make the Array Alternating",
        "Medium"
    ],
    "removing-minimum-number-of-magic-beans": [
        "Removing Minimum Number of Magic Beans",
        "Medium"
    ],
    "maximum-and-sum-of-array": [
        "Maximum AND Sum of Array",
        "Hard"
    ],
    "count-equal-and-divisible-pairs-in-an-array": [
        "Count Equal and Divisible Pairs in an Array",
        "Easy"
    ],
    "find-three-consecutive-integers-that-sum-to-a-given-number": [
        "Find Three Consecutive Integers That Sum to a Given Number",
        "Medium"
    ],
    "maximum-split-of-positive-even-integers": [
        "Maximum Split of Positive Even Integers",
        "Medium"
    ],
    "count-good-triplets-in-an-array": [
        "Count Good Triplets in an Array",
        "Hard"
    ],
    "count-integers-with-even-digit-sum": [
        "Count Integers With Even Digit Sum",
        "Easy"
    ],
    "merge-nodes-in-between-zeros": [
        "Merge Nodes in Between Zeros",
        "Medium"
    ],
    "construct-string-with-repeat-limit": [
        "Construct String With Repeat Limit",
        "Medium"
    ],
    "count-array-pairs-divisible-by-k": [
        "Count Array Pairs Divisible by K",
        "Hard"
    ],
    "counting-words-with-a-given-prefix": [
        "Counting Words With a Given Prefix",
        "Easy"
    ],
    "minimum-number-of-steps-to-make-two-strings-anagram-ii": [
        "Minimum Number of Steps to Make Two Strings Anagram II",
        "Medium"
    ],
    "minimum-time-to-complete-trips": [
        "Minimum Time to Complete Trips",
        "Medium"
    ],
    "minimum-time-to-finish-the-race": [
        "Minimum Time to Finish the Race",
        "Hard"
    ],
    "most-frequent-number-following-key-in-an-array": [
        "Most Frequent Number Following Key In an Array",
        "Easy"
    ],
    "sort-the-jumbled-numbers": [
        "Sort the Jumbled Numbers",
        "Medium"
    ],
    "all-ancestors-of-a-node-in-a-directed-acyclic-graph": [
        "All Ancestors of a Node in a Directed Acyclic Graph",
        "Medium"
    ],
    "minimum-number-of-moves-to-make-palindrome": [
        "Minimum Number of Moves to Make Palindrome",
        "Hard"
    ],
    "cells-in-a-range-on-an-excel-sheet": [
        "Cells in a Range on an Excel Sheet",
        "Easy"
    ],
    "append-k-integers-with-minimal-sum": [
        "Append K Integers With Minimal Sum",
        "Medium"
    ],
    "create-binary-tree-from-descriptions": [
        "Create Binary Tree From Descriptions",
        "Medium"
    ],
    "replace-non-coprime-numbers-in-array": [
        "Replace Non-Coprime Numbers in Array",
        "Hard"
    ],
    "find-all-k-distant-indices-in-an-array": [
        "Find All K-Distant Indices in an Array",
        "Easy"
    ],
    "count-artifacts-that-can-be-extracted": [
        "Count Artifacts That Can Be Extracted",
        "Medium"
    ],
    "maximize-the-topmost-element-after-k-moves": [
        "Maximize the Topmost Element After K Moves",
        "Medium"
    ],
    "minimum-weighted-subgraph-with-the-required-paths": [
        "Minimum Weighted Subgraph With the Required Paths",
        "Hard"
    ],
    "divide-array-into-equal-pairs": [
        "Divide Array Into Equal Pairs",
        "Easy"
    ],
    "maximize-number-of-subsequences-in-a-string": [
        "Maximize Number of Subsequences in a String",
        "Medium"
    ],
    "minimum-operations-to-halve-array-sum": [
        "Minimum Operations to Halve Array Sum",
        "Medium"
    ],
    "minimum-white-tiles-after-covering-with-carpets": [
        "Minimum White Tiles After Covering With Carpets",
        "Hard"
    ],
    "count-hills-and-valleys-in-an-array": [
        "Count Hills and Valleys in an Array",
        "Easy"
    ],
    "count-collisions-on-a-road": [
        "Count Collisions on a Road",
        "Medium"
    ],
    "maximum-points-in-an-archery-competition": [
        "Maximum Points in an Archery Competition",
        "Medium"
    ],
    "longest-substring-of-one-repeating-character": [
        "Longest Substring of One Repeating Character",
        "Hard"
    ],
    "find-the-difference-of-two-arrays": [
        "Find the Difference of Two Arrays",
        "Easy"
    ],
    "minimum-deletions-to-make-array-beautiful": [
        "Minimum Deletions to Make Array Beautiful",
        "Medium"
    ],
    "find-palindrome-with-fixed-length": [
        "Find Palindrome With Fixed Length",
        "Medium"
    ],
    "maximum-value-of-k-coins-from-piles": [
        "Maximum Value of K Coins From Piles",
        "Hard"
    ],
    "minimum-bit-flips-to-convert-number": [
        "Minimum Bit Flips to Convert Number",
        "Easy"
    ],
    "find-triangular-sum-of-an-array": [
        "Find Triangular Sum of an Array",
        "Medium"
    ],
    "number-of-ways-to-select-buildings": [
        "Number of Ways to Select Buildings",
        "Medium"
    ],
    "sum-of-scores-of-built-strings": [
        "Sum of Scores of Built Strings",
        "Hard"
    ],
    "minimum-number-of-operations-to-convert-time": [
        "Minimum Number of Operations to Convert Time",
        "Easy"
    ],
    "find-players-with-zero-or-one-losses": [
        "Find Players With Zero or One Losses",
        "Medium"
    ],
    "maximum-candies-allocated-to-k-children": [
        "Maximum Candies Allocated to K Children",
        "Medium"
    ],
    "encrypt-and-decrypt-strings": [
        "Encrypt and Decrypt Strings",
        "Hard"
    ],
    "largest-number-after-digit-swaps-by-parity": [
        "Largest Number After Digit Swaps by Parity",
        "Easy"
    ],
    "minimize-result-by-adding-parentheses-to-expression": [
        "Minimize Result by Adding Parentheses to Expression",
        "Medium"
    ],
    "maximum-product-after-k-increments": [
        "Maximum Product After K Increments",
        "Medium"
    ],
    "maximum-total-beauty-of-the-gardens": [
        "Maximum Total Beauty of the Gardens",
        "Hard"
    ],
    "add-two-integers": [
        "Add Two Integers",
        "Easy"
    ],
    "root-equals-sum-of-children": [
        "Root Equals Sum of Children",
        "Easy"
    ],
    "find-closest-number-to-zero": [
        "Find Closest Number to Zero",
        "Easy"
    ],
    "number-of-ways-to-buy-pens-and-pencils": [
        "Number of Ways to Buy Pens and Pencils",
        "Medium"
    ],
    "design-an-atm-machine": [
        "Design an ATM Machine",
        "Medium"
    ],
    "maximum-score-of-a-node-sequence": [
        "Maximum Score of a Node Sequence",
        "Hard"
    ],
    "calculate-digit-sum-of-a-string": [
        "Calculate Digit Sum of a String",
        "Easy"
    ],
    "minimum-rounds-to-complete-all-tasks": [
        "Minimum Rounds to Complete All Tasks",
        "Medium"
    ],
    "maximum-trailing-zeros-in-a-cornered-path": [
        "Maximum Trailing Zeros in a Cornered Path",
        "Medium"
    ],
    "longest-path-with-different-adjacent-characters": [
        "Longest Path With Different Adjacent Characters",
        "Hard"
    ],
    "intersection-of-multiple-arrays": [
        "Intersection of Multiple Arrays",
        "Easy"
    ],
    "count-lattice-points-inside-a-circle": [
        "Count Lattice Points Inside a Circle",
        "Medium"
    ],
    "count-number-of-rectangles-containing-each-point": [
        "Count Number of Rectangles Containing Each Point",
        "Medium"
    ],
    "number-of-flowers-in-full-bloom": [
        "Number of Flowers in Full Bloom",
        "Hard"
    ],
    "count-prefixes-of-a-given-string": [
        "Count Prefixes of a Given String",
        "Easy"
    ],
    "minimum-average-difference": [
        "Minimum Average Difference",
        "Medium"
    ],
    "count-unguarded-cells-in-the-grid": [
        "Count Unguarded Cells in the Grid",
        "Medium"
    ],
    "escape-the-spreading-fire": [
        "Escape the Spreading Fire",
        "Hard"
    ],
    "remove-digit-from-number-to-maximize-result": [
        "Remove Digit From Number to Maximize Result",
        "Easy"
    ],
    "minimum-consecutive-cards-to-pick-up": [
        "Minimum Consecutive Cards to Pick Up",
        "Medium"
    ],
    "k-divisible-elements-subarrays": [
        "K Divisible Elements Subarrays",
        "Medium"
    ],
    "total-appeal-of-a-string": [
        "Total Appeal of A String",
        "Hard"
    ],
    "largest-3-same-digit-number-in-string": [
        "Largest 3-Same-Digit Number in String",
        "Easy"
    ],
    "count-nodes-equal-to-average-of-subtree": [
        "Count Nodes Equal to Average of Subtree",
        "Medium"
    ],
    "count-number-of-texts": [
        "Count Number of Texts",
        "Medium"
    ],
    "check-if-there-is-a-valid-parentheses-string-path": [
        " Check if There Is a Valid Parentheses String Path",
        "Hard"
    ],
    "find-the-k-beauty-of-a-number": [
        "Find the K-Beauty of a Number",
        "Easy"
    ],
    "number-of-ways-to-split-array": [
        "Number of Ways to Split Array",
        "Medium"
    ],
    "maximum-white-tiles-covered-by-a-carpet": [
        "Maximum White Tiles Covered by a Carpet",
        "Medium"
    ],
    "substring-with-largest-variance": [
        "Substring With Largest Variance",
        "Hard"
    ],
    "find-resultant-array-after-removing-anagrams": [
        "Find Resultant Array After Removing Anagrams",
        "Easy"
    ],
    "maximum-consecutive-floors-without-special-floors": [
        "Maximum Consecutive Floors Without Special Floors",
        "Medium"
    ],
    "largest-combination-with-bitwise-and-greater-than-zero": [
        "Largest Combination With Bitwise AND Greater Than Zero",
        "Medium"
    ],
    "count-integers-in-intervals": [
        "Count Integers in Intervals",
        "Hard"
    ],
    "percentage-of-letter-in-string": [
        "Percentage of Letter in String",
        "Easy"
    ],
    "maximum-bags-with-full-capacity-of-rocks": [
        "Maximum Bags With Full Capacity of Rocks",
        "Medium"
    ],
    "minimum-lines-to-represent-a-line-chart": [
        "Minimum Lines to Represent a Line Chart",
        "Medium"
    ],
    "sum-of-total-strength-of-wizards": [
        "Sum of Total Strength of Wizards",
        "Hard"
    ],
    "check-if-number-has-equal-digit-count-and-digit-value": [
        "Check if Number Has Equal Digit Count and Digit Value",
        "Easy"
    ],
    "sender-with-largest-word-count": [
        "Sender With Largest Word Count",
        "Medium"
    ],
    "maximum-total-importance-of-roads": [
        "Maximum Total Importance of Roads",
        "Medium"
    ],
    "booking-concert-tickets-in-groups": [
        "Booking Concert Tickets in Groups",
        "Hard"
    ],
    "rearrange-characters-to-make-target-string": [
        "Rearrange Characters to Make Target String",
        "Easy"
    ],
    "apply-discount-to-prices": [
        "Apply Discount to Prices",
        "Medium"
    ],
    "steps-to-make-array-non-decreasing": [
        "Steps to Make Array Non-decreasing",
        "Medium"
    ],
    "minimum-obstacle-removal-to-reach-corner": [
        "Minimum Obstacle Removal to Reach Corner",
        "Hard"
    ],
    "min-max-game": [
        "Min Max Game",
        "Easy"
    ],
    "partition-array-such-that-maximum-difference-is-k": [
        "Partition Array Such That Maximum Difference Is K",
        "Medium"
    ],
    "replace-elements-in-an-array": [
        "Replace Elements in an Array",
        "Medium"
    ],
    "design-a-text-editor": [
        "Design a Text Editor",
        "Hard"
    ],
    "strong-password-checker-ii": [
        "Strong Password Checker II",
        "Easy"
    ],
    "successful-pairs-of-spells-and-potions": [
        "Successful Pairs of Spells and Potions",
        "Medium"
    ],
    "match-substring-after-replacement": [
        "Match Substring After Replacement",
        "Hard"
    ],
    "count-subarrays-with-score-less-than-k": [
        "Count Subarrays With Score Less Than K",
        "Hard"
    ],
    "calculate-amount-paid-in-taxes": [
        "Calculate Amount Paid in Taxes",
        "Easy"
    ],
    "minimum-path-cost-in-a-grid": [
        "Minimum Path Cost in a Grid",
        "Medium"
    ],
    "fair-distribution-of-cookies": [
        "Fair Distribution of Cookies",
        "Medium"
    ],
    "naming-a-company": [
        "Naming a Company",
        "Hard"
    ],
    "greatest-english-letter-in-upper-and-lower-case": [
        "Greatest English Letter in Upper and Lower Case",
        "Easy"
    ],
    "sum-of-numbers-with-units-digit-k": [
        "Sum of Numbers With Units Digit K",
        "Medium"
    ],
    "longest-binary-subsequence-less-than-or-equal-to-k": [
        "Longest Binary Subsequence Less Than or Equal to K",
        "Medium"
    ],
    "selling-pieces-of-wood": [
        "Selling Pieces of Wood",
        "Hard"
    ],
    "count-asterisks": [
        "Count Asterisks",
        "Easy"
    ],
    "count-unreachable-pairs-of-nodes-in-an-undirected-graph": [
        "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "Medium"
    ],
    "maximum-xor-after-operations": [
        "Maximum XOR After Operations ",
        "Medium"
    ],
    "number-of-distinct-roll-sequences": [
        "Number of Distinct Roll Sequences",
        "Hard"
    ],
    "check-if-matrix-is-x-matrix": [
        "Check if Matrix Is X-Matrix",
        "Easy"
    ],
    "count-number-of-ways-to-place-houses": [
        "Count Number of Ways to Place Houses",
        "Medium"
    ],
    "maximum-score-of-spliced-array": [
        "Maximum Score Of Spliced Array",
        "Hard"
    ],
    "minimum-score-after-removals-on-a-tree": [
        "Minimum Score After Removals on a Tree",
        "Hard"
    ],
    "decode-the-message": [
        "Decode the Message",
        "Easy"
    ],
    "spiral-matrix-iv": [
        "Spiral Matrix IV",
        "Medium"
    ],
    "number-of-people-aware-of-a-secret": [
        "Number of People Aware of a Secret",
        "Medium"
    ],
    "number-of-increasing-paths-in-a-grid": [
        "Number of Increasing Paths in a Grid",
        "Hard"
    ],
    "evaluate-boolean-binary-tree": [
        "Evaluate Boolean Binary Tree",
        "Easy"
    ],
    "the-latest-time-to-catch-a-bus": [
        "The Latest Time to Catch a Bus",
        "Medium"
    ],
    "minimum-sum-of-squared-difference": [
        "Minimum Sum of Squared Difference",
        "Medium"
    ],
    "subarray-with-elements-greater-than-varying-threshold": [
        "Subarray With Elements Greater Than Varying Threshold",
        "Hard"
    ],
    "minimum-amount-of-time-to-fill-cups": [
        "Minimum Amount of Time to Fill Cups",
        "Easy"
    ],
    "smallest-number-in-infinite-set": [
        "Smallest Number in Infinite Set",
        "Medium"
    ],
    "move-pieces-to-obtain-a-string": [
        "Move Pieces to Obtain a String",
        "Medium"
    ],
    "count-the-number-of-ideal-arrays": [
        "Count the Number of Ideal Arrays",
        "Hard"
    ],
    "maximum-number-of-pairs-in-array": [
        "Maximum Number of Pairs in Array",
        "Easy"
    ],
    "max-sum-of-a-pair-with-equal-sum-of-digits": [
        "Max Sum of a Pair With Equal Sum of Digits",
        "Medium"
    ],
    "query-kth-smallest-trimmed-number": [
        "Query Kth Smallest Trimmed Number",
        "Medium"
    ],
    "minimum-deletions-to-make-array-divisible": [
        "Minimum Deletions to Make Array Divisible",
        "Hard"
    ],
    "best-poker-hand": [
        "Best Poker Hand",
        "Easy"
    ],
    "number-of-zero-filled-subarrays": [
        "Number of Zero-Filled Subarrays",
        "Medium"
    ],
    "design-a-number-container-system": [
        "Design a Number Container System",
        "Medium"
    ],
    "shortest-impossible-sequence-of-rolls": [
        "Shortest Impossible Sequence of Rolls",
        "Hard"
    ],
    "first-letter-to-appear-twice": [
        "First Letter to Appear Twice",
        "Easy"
    ],
    "equal-row-and-column-pairs": [
        "Equal Row and Column Pairs",
        "Medium"
    ],
    "design-a-food-rating-system": [
        "Design a Food Rating System",
        "Medium"
    ],
    "number-of-excellent-pairs": [
        "Number of Excellent Pairs",
        "Hard"
    ],
    "make-array-zero-by-subtracting-equal-amounts": [
        "Make Array Zero by Subtracting Equal Amounts",
        "Easy"
    ],
    "maximum-number-of-groups-entering-a-competition": [
        "Maximum Number of Groups Entering a Competition",
        "Medium"
    ],
    "find-closest-node-to-given-two-nodes": [
        "Find Closest Node to Given Two Nodes",
        "Medium"
    ],
    "longest-cycle-in-a-graph": [
        "Longest Cycle in a Graph",
        "Hard"
    ],
    "merge-similar-items": [
        "Merge Similar Items",
        "Easy"
    ],
    "count-number-of-bad-pairs": [
        "Count Number of Bad Pairs",
        "Medium"
    ],
    "task-scheduler-ii": [
        "Task Scheduler II",
        "Medium"
    ],
    "minimum-replacements-to-sort-the-array": [
        "Minimum Replacements to Sort the Array",
        "Hard"
    ],
    "number-of-arithmetic-triplets": [
        "Number of Arithmetic Triplets",
        "Easy"
    ],
    "reachable-nodes-with-restrictions": [
        "Reachable Nodes With Restrictions",
        "Medium"
    ],
    "check-if-there-is-a-valid-partition-for-the-array": [
        "Check if There is a Valid Partition For The Array",
        "Medium"
    ],
    "longest-ideal-subsequence": [
        "Longest Ideal Subsequence",
        "Medium"
    ],
    "largest-local-values-in-a-matrix": [
        "Largest Local Values in a Matrix",
        "Easy"
    ],
    "node-with-highest-edge-score": [
        "Node With Highest Edge Score",
        "Medium"
    ],
    "construct-smallest-number-from-di-string": [
        "Construct Smallest Number From DI String",
        "Medium"
    ],
    "count-special-integers": [
        "Count Special Integers",
        "Hard"
    ],
    "minimum-recolors-to-get-k-consecutive-black-blocks": [
        "Minimum Recolors to Get K Consecutive Black Blocks",
        "Easy"
    ],
    "time-needed-to-rearrange-a-binary-string": [
        "Time Needed to Rearrange a Binary String",
        "Medium"
    ],
    "shifting-letters-ii": [
        "Shifting Letters II",
        "Medium"
    ],
    "maximum-segment-sum-after-removals": [
        "Maximum Segment Sum After Removals",
        "Hard"
    ],
    "minimum-hours-of-training-to-win-a-competition": [
        "Minimum Hours of Training to Win a Competition",
        "Easy"
    ],
    "largest-palindromic-number": [
        "Largest Palindromic Number",
        "Medium"
    ],
    "amount-of-time-for-binary-tree-to-be-infected": [
        "Amount of Time for Binary Tree to Be Infected",
        "Medium"
    ],
    "find-the-k-sum-of-an-array": [
        "Find the K-Sum of an Array",
        "Hard"
    ],
    "longest-subsequence-with-limited-sum": [
        "Longest Subsequence With Limited Sum",
        "Easy"
    ],
    "removing-stars-from-a-string": [
        "Removing Stars From a String",
        "Medium"
    ],
    "minimum-amount-of-time-to-collect-garbage": [
        "Minimum Amount of Time to Collect Garbage",
        "Medium"
    ],
    "build-a-matrix-with-conditions": [
        "Build a Matrix With Conditions",
        "Hard"
    ],
    "find-subarrays-with-equal-sum": [
        "Find Subarrays With Equal Sum",
        "Easy"
    ],
    "strictly-palindromic-number": [
        "Strictly Palindromic Number",
        "Medium"
    ],
    "maximum-rows-covered-by-columns": [
        "Maximum Rows Covered by Columns",
        "Medium"
    ],
    "maximum-number-of-robots-within-budget": [
        "Maximum Number of Robots Within Budget",
        "Hard"
    ],
    "check-distances-between-same-letters": [
        "Check Distances Between Same Letters",
        "Easy"
    ],
    "number-of-ways-to-reach-a-position-after-exactly-k-steps": [
        "Number of Ways to Reach a Position After Exactly k Steps",
        "Medium"
    ],
    "longest-nice-subarray": [
        "Longest Nice Subarray",
        "Medium"
    ],
    "meeting-rooms-iii": [
        "Meeting Rooms III",
        "Hard"
    ],
    "most-frequent-even-element": [
        "Most Frequent Even Element",
        "Easy"
    ],
    "optimal-partition-of-string": [
        "Optimal Partition of String",
        "Medium"
    ],
    "divide-intervals-into-minimum-number-of-groups": [
        "Divide Intervals Into Minimum Number of Groups",
        "Medium"
    ],
    "longest-increasing-subsequence-ii": [
        "Longest Increasing Subsequence II",
        "Hard"
    ],
    "count-days-spent-together": [
        "Count Days Spent Together",
        "Easy"
    ],
    "maximum-matching-of-players-with-trainers": [
        "Maximum Matching of Players With Trainers",
        "Medium"
    ],
    "smallest-subarrays-with-maximum-bitwise-or": [
        "Smallest Subarrays With Maximum Bitwise OR",
        "Medium"
    ],
    "minimum-money-required-before-transactions": [
        "Minimum Money Required Before Transactions",
        "Hard"
    ],
    "smallest-even-multiple": [
        "Smallest Even Multiple",
        "Easy"
    ],
    "length-of-the-longest-alphabetical-continuous-substring": [
        "Length of the Longest Alphabetical Continuous Substring",
        "Medium"
    ],
    "reverse-odd-levels-of-binary-tree": [
        "Reverse Odd Levels of Binary Tree",
        "Medium"
    ],
    "sum-of-prefix-scores-of-strings": [
        "Sum of Prefix Scores of Strings",
        "Hard"
    ],
    "sort-the-people": [
        "Sort the People",
        "Easy"
    ],
    "longest-subarray-with-maximum-bitwise-and": [
        "Longest Subarray With Maximum Bitwise AND",
        "Medium"
    ],
    "find-all-good-indices": [
        "Find All Good Indices",
        "Medium"
    ],
    "number-of-good-paths": [
        "Number of Good Paths",
        "Hard"
    ],
    "remove-letter-to-equalize-frequency": [
        "Remove Letter To Equalize Frequency",
        "Easy"
    ],
    "longest-uploaded-prefix": [
        "Longest Uploaded Prefix",
        "Medium"
    ],
    "bitwise-xor-of-all-pairings": [
        "Bitwise XOR of All Pairings",
        "Medium"
    ],
    "number-of-pairs-satisfying-inequality": [
        "Number of Pairs Satisfying Inequality",
        "Hard"
    ],
    "number-of-common-factors": [
        "Number of Common Factors",
        "Easy"
    ],
    "maximum-sum-of-an-hourglass": [
        "Maximum Sum of an Hourglass",
        "Medium"
    ],
    "minimize-xor": [
        "Minimize XOR",
        "Medium"
    ],
    "maximum-deletions-on-a-string": [
        "Maximum Deletions on a String",
        "Hard"
    ],
    "the-employee-that-worked-on-the-longest-task": [
        "The Employee That Worked on the Longest Task",
        "Easy"
    ],
    "find-the-original-array-of-prefix-xor": [
        "Find The Original Array of Prefix Xor",
        "Medium"
    ],
    "using-a-robot-to-print-the-lexicographically-smallest-string": [
        "Using a Robot to Print the Lexicographically Smallest String",
        "Medium"
    ],
    "paths-in-matrix-whose-sum-is-divisible-by-k": [
        "Paths in Matrix Whose Sum Is Divisible by K",
        "Hard"
    ],
    "number-of-valid-clock-times": [
        "Number of Valid Clock Times",
        "Easy"
    ],
    "range-product-queries-of-powers": [
        "Range Product Queries of Powers",
        "Medium"
    ],
    "minimize-maximum-of-array": [
        "Minimize Maximum of Array",
        "Medium"
    ],
    "create-components-with-same-value": [
        "Create Components With Same Value",
        "Hard"
    ],
    "largest-positive-integer-that-exists-with-its-negative": [
        "Largest Positive Integer That Exists With Its Negative",
        "Easy"
    ],
    "count-number-of-distinct-integers-after-reverse-operations": [
        "Count Number of Distinct Integers After Reverse Operations",
        "Medium"
    ],
    "sum-of-number-and-its-reverse": [
        "Sum of Number and Its Reverse",
        "Medium"
    ],
    "count-subarrays-with-fixed-bounds": [
        "Count Subarrays With Fixed Bounds",
        "Hard"
    ],
    "determine-if-two-events-have-conflict": [
        "Determine if Two Events Have Conflict",
        "Easy"
    ],
    "number-of-subarrays-with-gcd-equal-to-k": [
        "Number of Subarrays With GCD Equal to K",
        "Medium"
    ],
    "minimum-cost-to-make-array-equal": [
        "Minimum Cost to Make Array Equal",
        "Hard"
    ],
    "minimum-number-of-operations-to-make-arrays-similar": [
        "Minimum Number of Operations to Make Arrays Similar",
        "Hard"
    ]
}